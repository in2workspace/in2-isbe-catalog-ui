/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/individual": {
    /**
     * List or find Individual objects
     * @description This operation list or find Individual entities
     */
    get: operations["listIndividual"];
    /**
     * Creates a Individual
     * @description This operation creates a Individual entity.
     */
    post: operations["createIndividual"];
  };
  "/individual/{id}": {
    /**
     * Retrieves a Individual by ID
     * @description This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveIndividual"];
    /**
     * Deletes a Individual
     * @description This operation deletes a Individual entity.
     */
    delete: operations["deleteIndividual"];
    /**
     * Updates partially a Individual
     * @description This operation updates partially a Individual entity.
     */
    patch: operations["patchIndividual"];
  };
  "/organization": {
    /**
     * List or find Organization objects
     * @description This operation list or find Organization entities
     */
    get: operations["listOrganization"];
    /**
     * Creates a Organization
     * @description This operation creates a Organization entity.
     */
    post: operations["createOrganization"];
  };
  "/organization/{id}": {
    /**
     * Retrieves a Organization by ID
     * @description This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveOrganization"];
    /**
     * Deletes a Organization
     * @description This operation deletes a Organization entity.
     */
    delete: operations["deleteOrganization"];
    /**
     * Updates partially a Organization
     * @description This operation updates partially a Organization entity.
     */
    patch: operations["patchOrganization"];
  };
  "/hub": {
    /**
     * Register a listener
     * @description Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
     */
    post: operations["registerListener"];
  };
  "/hub/{id}": {
    /**
     * Unregister a listener
     * @description Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
     */
    delete: operations["unregisterListener"];
  };
  "/listener/organizationCreateEvent": {
    /**
     * Client listener for entity OrganizationCreateEvent
     * @description Example of a client listener for receiving the notification OrganizationCreateEvent
     */
    post: operations["listenToOrganizationCreateEvent"];
  };
  "/listener/organizationAttributeValueChangeEvent": {
    /**
     * Client listener for entity OrganizationAttributeValueChangeEvent
     * @description Example of a client listener for receiving the notification OrganizationAttributeValueChangeEvent
     */
    post: operations["listenToOrganizationAttributeValueChangeEvent"];
  };
  "/listener/organizationStateChangeEvent": {
    /**
     * Client listener for entity OrganizationStateChangeEvent
     * @description Example of a client listener for receiving the notification OrganizationStateChangeEvent
     */
    post: operations["listenToOrganizationStateChangeEvent"];
  };
  "/listener/organizationDeleteEvent": {
    /**
     * Client listener for entity OrganizationDeleteEvent
     * @description Example of a client listener for receiving the notification OrganizationDeleteEvent
     */
    post: operations["listenToOrganizationDeleteEvent"];
  };
  "/listener/individualCreateEvent": {
    /**
     * Client listener for entity IndividualCreateEvent
     * @description Example of a client listener for receiving the notification IndividualCreateEvent
     */
    post: operations["listenToIndividualCreateEvent"];
  };
  "/listener/individualAttributeValueChangeEvent": {
    /**
     * Client listener for entity IndividualAttributeValueChangeEvent
     * @description Example of a client listener for receiving the notification IndividualAttributeValueChangeEvent
     */
    post: operations["listenToIndividualAttributeValueChangeEvent"];
  };
  "/listener/individualStateChangeEvent": {
    /**
     * Client listener for entity IndividualStateChangeEvent
     * @description Example of a client listener for receiving the notification IndividualStateChangeEvent
     */
    post: operations["listenToIndividualStateChangeEvent"];
  };
  "/listener/individualDeleteEvent": {
    /**
     * Client listener for entity IndividualDeleteEvent
     * @description Example of a client listener for receiving the notification IndividualDeleteEvent
     */
    post: operations["listenToIndividualDeleteEvent"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Any: Record<string, never>;
    /** @description Complements the description of an element (for instance a product) through video, pictures... */
    Attachment: {
      /** @description Unique identifier for this particular attachment */
      id?: string;
      /** @description URI for this Attachment */
      href?: string;
      /** @description Attachment type such as video, picture */
      attachmentType?: string;
      /** @description The actual contents of the attachment object, if embedded, encoded as base64 */
      content?: string;
      /** @description A narrative text describing the content of the attachment */
      description?: string;
      /** @description Attachment mime type such as extension file for video, picture and document */
      mimeType?: string;
      /** @description The name of the attachment */
      name?: string;
      /** @description Uniform Resource Locator, is a web page address (a subset of URI) */
      url?: string;
      size?: components["schemas"]["Quantity"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures */
    AttachmentRef: {
      /** @description Unique-Identifier for this attachment */
      id: string;
      /** @description URL serving as reference for the attachment resource */
      href?: string;
      /** @description A narrative text describing the content of the attachment */
      description?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Link to the attachment media/content */
      url?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture. */
    AttachmentRefOrValue: {
      /** @description Unique identifier for this particular attachment */
      id?: string;
      /** @description URI for this Attachment */
      href?: string;
      /** @description Attachment type such as video, picture */
      attachmentType?: string;
      /** @description The actual contents of the attachment object, if embedded, encoded as base64 */
      content?: string;
      /** @description A narrative text describing the content of the attachment */
      description?: string;
      /** @description Attachment mime type such as extension file for video, picture and document */
      mimeType?: string;
      /** @description The name of the attachment */
      name?: string;
      /** @description Uniform Resource Locator, is a web page address (a subset of URI) */
      url?: string;
      size?: components["schemas"]["Quantity"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description Describes a given characteristic of an object or entity through a name/value pair. */
    Characteristic: {
      /** @description Name of the characteristic */
      name: string;
      /** @description Data type of the value of the characteristic */
      valueType?: string;
      value: components["schemas"]["Any"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Indicates the contact medium that could be used to contact the party. */
    ContactMedium: {
      /** @description Type of the contact medium, such as: email address, telephone number, postal address */
      mediumType?: string;
      /** @description If true, indicates that is the preferred contact medium */
      preferred?: boolean;
      characteristic?: components["schemas"]["MediumCharacteristic"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Lack or inadequate strength or ability. */
    Disability: {
      /** @description Code of the disability */
      disabilityCode?: string;
      /** @description Name of the disability */
      disabilityName?: string;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Entity reference schema to be use for all entityRef class. */
    EntityRef: {
      /** @description Unique identifier of a related entity. */
      id: string;
      /** @description Reference of the related entity. */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description External reference of the individual or reference in other system */
    ExternalReference: {
      /** @description Type of the external reference */
      externalReferenceType?: string;
      /** @description External reference name */
      name?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about. */
    Individual: {
      /** @description Unique identifier of the organization */
      id: string;
      /** @description Hyperlink to access the organization */
      href?: string;
      /** @description e.g. Baron, Graf, Earl,… */
      aristocraticTitle?: string;
      /**
       * Format: date-time
       * @description Birth date
       */
      birthDate?: string;
      /** @description Country where the individual was born */
      countryOfBirth?: string;
      /**
       * Format: date-time
       * @description Date of death
       */
      deathDate?: string;
      /** @description Contains the non-chosen or inherited name. Also known as last name in the Western context */
      familyName?: string;
      /** @description Family name prefix */
      familyNamePrefix?: string;
      /** @description A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…) */
      formattedName?: string;
      /** @description Full name flatten (first, middle, and last names) */
      fullName?: string;
      /** @description Gender */
      gender?: string;
      /** @description e.g.. Sr, Jr, III (the third),… */
      generation?: string;
      /** @description First name of the individual */
      givenName?: string;
      /** @description Legal name or birth name (name one has for official purposes) */
      legalName?: string;
      /** @description Temporary current location od the individual (may be used if the individual has approved its sharing) */
      location?: string;
      /** @description Marital status (married, divorced, widow ...) */
      maritalStatus?: string;
      /** @description Middles name or initial */
      middleName?: string;
      /** @description Nationality */
      nationality?: string;
      /** @description Reference to the place where the individual was born */
      placeOfBirth?: string;
      /** @description Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname */
      preferredGivenName?: string;
      /** @description Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ... */
      title?: string;
      contactMedium?: components["schemas"]["ContactMedium"][];
      creditRating?: components["schemas"]["PartyCreditProfile"][];
      disability?: components["schemas"]["Disability"][];
      externalReference?: components["schemas"]["ExternalReference"][];
      individualIdentification?: components["schemas"]["IndividualIdentification"][];
      languageAbility?: components["schemas"]["LanguageAbility"][];
      otherName?: components["schemas"]["OtherNameIndividual"][];
      partyCharacteristic?: components["schemas"]["Characteristic"][];
      relatedParty?: components["schemas"]["RelatedParty"][];
      skill?: components["schemas"]["Skill"][];
      status?: components["schemas"]["IndividualStateType"];
      taxExemptionCertificate?: components["schemas"]["TaxExemptionCertificate"][];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /**
     * @description Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.
     * Skipped properties: id,href
     */
    Individual_Create: {
      /** @description e.g. Baron, Graf, Earl,… */
      aristocraticTitle?: string;
      /**
       * Format: date-time
       * @description Birth date
       */
      birthDate?: string;
      /** @description Country where the individual was born */
      countryOfBirth?: string;
      /**
       * Format: date-time
       * @description Date of death
       */
      deathDate?: string;
      /** @description Contains the non-chosen or inherited name. Also known as last name in the Western context */
      familyName: string;
      /** @description Family name prefix */
      familyNamePrefix?: string;
      /** @description A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…) */
      formattedName?: string;
      /** @description Full name flatten (first, middle, and last names) */
      fullName?: string;
      /** @description Gender */
      gender?: string;
      /** @description e.g.. Sr, Jr, III (the third),… */
      generation?: string;
      /** @description First name of the individual */
      givenName: string;
      /** @description Legal name or birth name (name one has for official purposes) */
      legalName?: string;
      /** @description Temporary current location od the individual (may be used if the individual has approved its sharing) */
      location?: string;
      /** @description Marital status (married, divorced, widow ...) */
      maritalStatus?: string;
      /** @description Middles name or initial */
      middleName?: string;
      /** @description Nationality */
      nationality?: string;
      /** @description Reference to the place where the individual was born */
      placeOfBirth?: string;
      /** @description Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname */
      preferredGivenName?: string;
      /** @description Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ... */
      title?: string;
      contactMedium?: components["schemas"]["ContactMedium"][];
      creditRating?: components["schemas"]["PartyCreditProfile"][];
      disability?: components["schemas"]["Disability"][];
      externalReference?: components["schemas"]["ExternalReference"][];
      individualIdentification?: components["schemas"]["IndividualIdentification"][];
      languageAbility?: components["schemas"]["LanguageAbility"][];
      otherName?: components["schemas"]["OtherNameIndividual"][];
      partyCharacteristic?: components["schemas"]["Characteristic"][];
      relatedParty?: components["schemas"]["RelatedParty"][];
      skill?: components["schemas"]["Skill"][];
      status?: components["schemas"]["IndividualStateType"];
      taxExemptionCertificate?: components["schemas"]["TaxExemptionCertificate"][];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /**
     * @description Individual represents a single human being (a man, woman or child). The individual can be a customer, an employee or any other person that the organization needs to store information about.
     * Skipped properties: id,href
     */
    Individual_Update: {
      /** @description e.g. Baron, Graf, Earl,… */
      aristocraticTitle?: string;
      /**
       * Format: date-time
       * @description Birth date
       */
      birthDate?: string;
      /** @description Country where the individual was born */
      countryOfBirth?: string;
      /**
       * Format: date-time
       * @description Date of death
       */
      deathDate?: string;
      /** @description Contains the non-chosen or inherited name. Also known as last name in the Western context */
      familyName?: string;
      /** @description Family name prefix */
      familyNamePrefix?: string;
      /** @description A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…) */
      formattedName?: string;
      /** @description Full name flatten (first, middle, and last names) */
      fullName?: string;
      /** @description Gender */
      gender?: string;
      /** @description e.g.. Sr, Jr, III (the third),… */
      generation?: string;
      /** @description First name of the individual */
      givenName?: string;
      /** @description Legal name or birth name (name one has for official purposes) */
      legalName?: string;
      /** @description Temporary current location od the individual (may be used if the individual has approved its sharing) */
      location?: string;
      /** @description Marital status (married, divorced, widow ...) */
      maritalStatus?: string;
      /** @description Middles name or initial */
      middleName?: string;
      /** @description Nationality */
      nationality?: string;
      /** @description Reference to the place where the individual was born */
      placeOfBirth?: string;
      /** @description Contains the chosen name by which the individual prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname */
      preferredGivenName?: string;
      /** @description Useful for titles (aristocratic, social,...) Pr, Dr, Sir, ... */
      title?: string;
      contactMedium?: components["schemas"]["ContactMedium"][];
      creditRating?: components["schemas"]["PartyCreditProfile"][];
      disability?: components["schemas"]["Disability"][];
      externalReference?: components["schemas"]["ExternalReference"][];
      individualIdentification?: components["schemas"]["IndividualIdentification"][];
      languageAbility?: components["schemas"]["LanguageAbility"][];
      otherName?: components["schemas"]["OtherNameIndividual"][];
      partyCharacteristic?: components["schemas"]["Characteristic"][];
      relatedParty?: components["schemas"]["RelatedParty"][];
      skill?: components["schemas"]["Skill"][];
      status?: components["schemas"]["IndividualStateType"];
      taxExemptionCertificate?: components["schemas"]["TaxExemptionCertificate"][];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Represents our registration of information used as proof of identity by an individual (passport, national identity card, drivers license, social security number, birth certificate) */
    IndividualIdentification: {
      /** @description Identifier */
      identificationId?: string;
      /** @description Identification type (passport, national identity card, drivers license, social security number, birth certificate) */
      identificationType?: string;
      /** @description Authority which has issued the identifier, such as: social security, town hall */
      issuingAuthority?: string;
      /**
       * Format: date-time
       * @description Date at which the identifier was issued
       */
      issuingDate?: string;
      attachment?: components["schemas"]["AttachmentRefOrValue"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /**
     * @description Valid values for the lifecycle state of the individual
     * @enum {string}
     */
    IndividualStateType: "initialized" | "validated" | "deceaded";
    /** @description Ability of an individual to understand or converse in a language. */
    LanguageAbility: {
      /** @description A “true” value specifies whether the language is considered by the individual as his favourite one */
      isFavouriteLanguage?: boolean;
      /** @description Language code (RFC 5646) */
      languageCode?: string;
      /** @description Language name */
      languageName?: string;
      /** @description Listening proficiency evaluated for this language */
      listeningProficiency?: string;
      /** @description Reading proficiency evaluated for this language */
      readingProficiency?: string;
      /** @description Speaking proficiency evaluated for this language */
      speakingProficiency?: string;
      /** @description Writing proficiency evaluated for this language */
      writingProficiency?: string;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Describes the contact medium characteristics that could be used to contact a party (an individual or an organization) */
    MediumCharacteristic: {
      /** @description The city */
      city?: string;
      /** @description The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation… */
      contactType?: string;
      /** @description The country */
      country?: string;
      /** @description Full email address in standard format */
      emailAddress?: string;
      /** @description The fax number of the contact */
      faxNumber?: string;
      /** @description The primary phone number of the contact */
      phoneNumber?: string;
      /** @description Postcode */
      postCode?: string;
      /** @description Identifier as a member of a social network */
      socialNetworkId?: string;
      /** @description State or province */
      stateOrProvince?: string;
      /** @description Describes the street */
      street1?: string;
      /** @description Complementary street description */
      street2?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data. */
    Organization: {
      /** @description Unique identifier of the organization */
      id: string;
      /** @description Hyperlink to access the organization */
      href?: string;
      /** @description If value is true, the organization is the head office */
      isHeadOffice?: boolean;
      /** @description If value is true, the organization is a legal entity known by a national referential. */
      isLegalEntity?: boolean;
      /** @description Organization name (department name for example) */
      name?: string;
      /** @description Type of the name : Co, Inc, Ltd,… */
      nameType?: string;
      /** @description Type of Organization (company, department...) */
      organizationType?: string;
      /** @description Name that the organization (unit) trades under */
      tradingName?: string;
      contactMedium?: components["schemas"]["ContactMedium"][];
      creditRating?: components["schemas"]["PartyCreditProfile"][];
      existsDuring?: components["schemas"]["TimePeriod"];
      externalReference?: components["schemas"]["ExternalReference"][];
      organizationChildRelationship?: components["schemas"]["OrganizationChildRelationship"][];
      organizationIdentification?: components["schemas"]["OrganizationIdentification"][];
      organizationParentRelationship?: components["schemas"]["OrganizationParentRelationship"];
      otherName?: components["schemas"]["OtherNameOrganization"][];
      partyCharacteristic?: components["schemas"]["Characteristic"][];
      relatedParty?: components["schemas"]["RelatedParty"][];
      status?: components["schemas"]["OrganizationStateType"];
      taxExemptionCertificate?: components["schemas"]["TaxExemptionCertificate"][];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /**
     * @description Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.
     * Skipped properties: id,href
     */
    Organization_Create: {
      /** @description If value is true, the organization is the head office */
      isHeadOffice?: boolean;
      /** @description If value is true, the organization is a legal entity known by a national referential. */
      isLegalEntity?: boolean;
      /** @description Organization name (department name for example) */
      name?: string;
      /** @description Type of the name : Co, Inc, Ltd,… */
      nameType?: string;
      /** @description Type of Organization (company, department...) */
      organizationType?: string;
      /** @description Name that the organization (unit) trades under */
      tradingName: string;
      contactMedium?: components["schemas"]["ContactMedium"][];
      creditRating?: components["schemas"]["PartyCreditProfile"][];
      existsDuring?: components["schemas"]["TimePeriod"];
      externalReference?: components["schemas"]["ExternalReference"][];
      organizationChildRelationship?: components["schemas"]["OrganizationChildRelationship"][];
      organizationIdentification?: components["schemas"]["OrganizationIdentification"][];
      organizationParentRelationship?: components["schemas"]["OrganizationParentRelationship"];
      otherName?: components["schemas"]["OtherNameOrganization"][];
      partyCharacteristic?: components["schemas"]["Characteristic"][];
      relatedParty?: components["schemas"]["RelatedParty"][];
      status?: components["schemas"]["OrganizationStateType"];
      taxExemptionCertificate?: components["schemas"]["TaxExemptionCertificate"][];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /**
     * @description Organization represents a group of people identified by shared interests or purpose. Examples include business, department and enterprise. Because of the complex nature of many businesses, both organizations and organization units are represented by the same data.
     * Skipped properties: id,href
     */
    Organization_Update: {
      /** @description If value is true, the organization is the head office */
      isHeadOffice?: boolean;
      /** @description If value is true, the organization is a legal entity known by a national referential. */
      isLegalEntity?: boolean;
      /** @description Organization name (department name for example) */
      name?: string;
      /** @description Type of the name : Co, Inc, Ltd,… */
      nameType?: string;
      /** @description Type of Organization (company, department...) */
      organizationType?: string;
      /** @description Name that the organization (unit) trades under */
      tradingName?: string;
      contactMedium?: components["schemas"]["ContactMedium"][];
      creditRating?: components["schemas"]["PartyCreditProfile"][];
      existsDuring?: components["schemas"]["TimePeriod"];
      externalReference?: components["schemas"]["ExternalReference"][];
      organizationChildRelationship?: components["schemas"]["OrganizationChildRelationship"][];
      organizationIdentification?: components["schemas"]["OrganizationIdentification"][];
      organizationParentRelationship?: components["schemas"]["OrganizationParentRelationship"];
      otherName?: components["schemas"]["OtherNameOrganization"][];
      partyCharacteristic?: components["schemas"]["Characteristic"][];
      relatedParty?: components["schemas"]["RelatedParty"][];
      status?: components["schemas"]["OrganizationStateType"];
      taxExemptionCertificate?: components["schemas"]["TaxExemptionCertificate"][];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Child references of an organization in a structure of organizations. */
    OrganizationChildRelationship: {
      /** @description Type of the relationship. Could be juridical, hierarchical, geographical, functional for example. */
      relationshipType?: string;
      organization?: components["schemas"]["OrganizationRef"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Represents our registration of information used as proof of identity by an organization */
    OrganizationIdentification: {
      /** @description Identifier */
      identificationId?: string;
      /** @description Type of identification information used to identify the company in a country or internationally */
      identificationType?: string;
      /** @description Authority which has issued the identifier (chamber of commerce...) */
      issuingAuthority?: string;
      /**
       * Format: date-time
       * @description Date at which the identifier was issued
       */
      issuingDate?: string;
      attachment?: components["schemas"]["AttachmentRefOrValue"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Parent references of an organization in a structure of organizations. */
    OrganizationParentRelationship: {
      /** @description Type of the relationship. Could be juridical, hierarchical, geographical, functional for example. */
      relationshipType?: string;
      organization?: components["schemas"]["OrganizationRef"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    OrganizationRef: {
      /** @description Unique identifier of a related entity. */
      id: string;
      /** @description Reference of the related entity. */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /**
     * @description Valid values for the lifecycle state of the organization
     * @enum {string}
     */
    OrganizationStateType: "initialized" | "validated" | "closed";
    /** @description Keeps track of other names, for example the old name of a woman before marriage or an artist name. */
    OtherNameIndividual: {
      /** @description e.g. Baron, Graf, Earl,… */
      aristocraticTitle?: string;
      /** @description Contains the non-chosen or inherited name. Also known as last name in the Western context */
      familyName?: string;
      /** @description Family name prefix */
      familyNamePrefix?: string;
      /** @description . A fully formatted name in one string with all of its pieces in their proper place and all of the necessary punctuation. Useful for specific contexts (Chinese, Japanese, Korean,…) */
      formattedName?: string;
      /** @description Full name flatten (first, middle, and last names) */
      fullName?: string;
      /** @description e.g. Sr, Jr… */
      generation?: string;
      /** @description First name */
      givenName?: string;
      /** @description Legal name or birth name (name one has for official purposes) */
      legalName?: string;
      /** @description Middle name or initial */
      middleName?: string;
      /** @description Contains the chosen name by which the person prefers to be addressed. Note: This name may be a name other than a given name, such as a nickname */
      preferredGivenName?: string;
      /** @description Use for titles (aristrocatic, social, ...): Pr, Dr, Sir,.... */
      title?: string;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Keeps track of other names, for example the old name of an organization. */
    OtherNameOrganization: {
      /** @description Organization name (department name for example) */
      name?: string;
      /** @description Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh */
      nameType?: string;
      /** @description The name that the organization trades under */
      tradingName?: string;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Generic Party structure used to define commonalities between sub concepts of Individual and Organization. */
    Party: {
      /** @description Unique identifier of the organization */
      id?: string;
      /** @description Hyperlink to access the organization */
      href?: string;
      contactMedium?: components["schemas"]["ContactMedium"][];
      creditRating?: components["schemas"]["PartyCreditProfile"][];
      externalReference?: components["schemas"]["ExternalReference"][];
      partyCharacteristic?: components["schemas"]["Characteristic"][];
      relatedParty?: components["schemas"]["RelatedParty"][];
      taxExemptionCertificate?: components["schemas"]["TaxExemptionCertificate"][];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description An individual might be evaluated for its worthiness and this evaluation might be based on a credit rating given by a credit agency. */
    PartyCreditProfile: {
      /** @description Name of the credit agency giving the score */
      creditAgencyName?: string;
      /** @description Type of the credit agency giving the score */
      creditAgencyType?: string;
      /** @description Reference corresponding to the credit rating */
      ratingReference?: string;
      /** @description A measure of a party’s creditworthiness calculated on the basis of a combination of factors such as their income and credit history */
      ratingScore?: number;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description An amount in a given unit */
    Quantity: {
      /**
       * Format: float
       * @description Numeric value in a given unit
       * @default 1
       */
      amount?: number;
      /** @description Unit */
      units?: string;
    };
    /** @description Related Entity reference. A related party defines party or party role linked to a specific entity. */
    RelatedParty: {
      /** @description Unique identifier of a related entity. */
      id: string;
      /** @description Reference of the related entity. */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Role played by the related party */
      role?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType": string;
    };
    /** @description Skills evaluated for an individual with a level and possibly with a limited validity when an obsolescence is defined (Ex: the first-aid certificate first level is limited to one year and an update training is required each year to keep the level). */
    Skill: {
      /** @description A free text comment linked to the evaluation done */
      comment?: string;
      /** @description Level of expertise in a skill evaluated for an individual */
      evaluatedLevel?: string;
      /** @description Code of the skill */
      skillCode?: string;
      /** @description Name of the skill such as Java language,… */
      skillName?: string;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description Reference of a tax definition. A tax is levied by an authorized tax jurisdiction. There are many different types of tax (Federal Tax levied by the US Government, State Tax levied by the State of California,…). */
    TaxDefinition: {
      /** @description Unique identifier of the tax. */
      id?: string;
      /** @description Tax name. */
      name?: string;
      /** @description Type of  the tax. */
      taxType?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description A tax exemption certificate represents a tax exemption granted to a party (individual or organization) by a tax jurisdiction which may be a city, state, country,... An exemption has a certificate identifier (received from the jurisdiction that levied the tax) and a validity period. An exemption is per tax types and determines for each type of tax what portion of the tax is exempted (partial by percentage or complete) via the tax definition. */
    TaxExemptionCertificate: {
      /** @description Unique identifier of the certificate of the tax exemption */
      id?: string;
      attachment?: components["schemas"]["AttachmentRefOrValue"];
      taxDefinition?: components["schemas"]["TaxDefinition"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name */
      "@type"?: string;
    };
    /** @description A period of time, either as a deadline (endDateTime only) a startDateTime only, or both */
    TimePeriod: {
      /**
       * Format: date-time
       * @description End of the time period, using IETC-RFC-3339 format
       */
      endDateTime?: string;
      /**
       * Format: date-time
       * @description Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end
       */
      startDateTime?: string;
    };
    /** @description Sets the communication endpoint address the service instance must use to deliver notification information */
    EventSubscription: {
      /** @description Id of the listener */
      id: string;
      /** @description The callback being registered. */
      callback: string;
      /** @description additional data to be passed */
      query?: string;
    };
    /** @description Sets the communication endpoint address the service instance must use to deliver notification information */
    EventSubscriptionInput: {
      /** @description The callback being registered. */
      callback: string;
      /** @description additional data to be passed */
      query?: string;
    };
    /** @description The notification data structure */
    OrganizationCreateEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description Reference of the ProcessFlow */
      href?: string;
      /** @description Identifier of the Process flow */
      id?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["OrganizationCreateEventPayload"];
    };
    /** @description The event data structure */
    OrganizationCreateEventPayload: {
      organization?: components["schemas"]["Organization"];
    };
    /** @description The notification data structure */
    OrganizationAttributeValueChangeEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /** @description The path identifying the object field concerned by this notification. */
      fieldPath?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["OrganizationAttributeValueChangeEventPayload"];
    };
    /** @description The event data structure */
    OrganizationAttributeValueChangeEventPayload: {
      organization?: components["schemas"]["Organization"];
    };
    /** @description The notification data structure */
    OrganizationStateChangeEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description Reference of the ProcessFlow */
      href?: string;
      /** @description Identifier of the Process flow */
      id?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["OrganizationStateChangeEventPayload"];
    };
    /** @description The event data structure */
    OrganizationStateChangeEventPayload: {
      organization?: components["schemas"]["Organization"];
    };
    /** @description The notification data structure */
    OrganizationDeleteEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description Reference of the ProcessFlow */
      href?: string;
      /** @description Identifier of the Process flow */
      id?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["OrganizationDeleteEventPayload"];
    };
    /** @description The event data structure */
    OrganizationDeleteEventPayload: {
      organization?: components["schemas"]["Organization"];
    };
    /** @description The notification data structure */
    IndividualCreateEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description Reference of the ProcessFlow */
      href?: string;
      /** @description Identifier of the Process flow */
      id?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["IndividualCreateEventPayload"];
    };
    /** @description The event data structure */
    IndividualCreateEventPayload: {
      individual?: components["schemas"]["Individual"];
    };
    /** @description The notification data structure */
    IndividualAttributeValueChangeEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /** @description The path identifying the object field concerned by this notification. */
      fieldPath?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["IndividualAttributeValueChangeEventPayload"];
    };
    /** @description The event data structure */
    IndividualAttributeValueChangeEventPayload: {
      individual?: components["schemas"]["Individual"];
    };
    /** @description The notification data structure */
    IndividualStateChangeEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description Reference of the ProcessFlow */
      href?: string;
      /** @description Identifier of the Process flow */
      id?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["IndividualStateChangeEventPayload"];
    };
    /** @description The event data structure */
    IndividualStateChangeEventPayload: {
      individual?: components["schemas"]["Individual"];
    };
    /** @description The notification data structure */
    IndividualDeleteEvent: {
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description A priority. */
      priority?: string;
      /** @description Reference of the ProcessFlow */
      href?: string;
      /** @description Identifier of the Process flow */
      id?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      event?: components["schemas"]["IndividualDeleteEventPayload"];
    };
    /** @description The event data structure */
    IndividualDeleteEventPayload: {
      individual?: components["schemas"]["Individual"];
    };
    /** @description Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx) */
    Error: {
      /** @description Application relevant detail, defined in the API or a common list. */
      code: string;
      /** @description Explanation of the reason for the error which can be shown to a client user. */
      reason: string;
      /** @description More details and corrective actions related to the error which can be shown to a client user. */
      message?: string;
      /** @description HTTP Error code extension */
      status?: string;
      /**
       * Format: uri
       * @description URI of documentation describing the error.
       */
      referenceError?: string;
      /** @description When sub-classing, this defines the super-class. */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name. */
      "@type"?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List or find Individual objects
   * @description This operation list or find Individual entities
   */
  listIndividual: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["Individual"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a Individual
   * @description This operation creates a Individual entity.
   */
  createIndividual: {
    /** @description The Individual to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["Individual_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Individual"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a Individual by ID
   * @description This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveIndividual: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the Individual */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Individual"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a Individual
   * @description This operation deletes a Individual entity.
   */
  deleteIndividual: {
    parameters: {
      path: {
        /** @description Identifier of the Individual */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Updates partially a Individual
   * @description This operation updates partially a Individual entity.
   */
  patchIndividual: {
    parameters: {
      path: {
        /** @description Identifier of the Individual */
        id: string;
      };
    };
    /** @description The Individual to be updated */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["Individual_Update"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Individual"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * List or find Organization objects
   * @description This operation list or find Organization entities
   */
  listOrganization: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["Organization"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a Organization
   * @description This operation creates a Organization entity.
   */
  createOrganization: {
    /** @description The Organization to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["Organization_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Organization"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a Organization by ID
   * @description This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveOrganization: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the Organization */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Organization"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a Organization
   * @description This operation deletes a Organization entity.
   */
  deleteOrganization: {
    parameters: {
      path: {
        /** @description Identifier of the Organization */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Updates partially a Organization
   * @description This operation updates partially a Organization entity.
   */
  patchOrganization: {
    parameters: {
      path: {
        /** @description Identifier of the Organization */
        id: string;
      };
    };
    /** @description The Organization to be updated */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["Organization_Update"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Organization"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Register a listener
   * @description Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
   */
  registerListener: {
    /** @description Data containing the callback endpoint to deliver the information */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["EventSubscriptionInput"];
      };
    };
    responses: {
      /** @description Subscribed */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Unregister a listener
   * @description Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
   */
  unregisterListener: {
    parameters: {
      path: {
        /** @description The id of the registered listener */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity OrganizationCreateEvent
   * @description Example of a client listener for receiving the notification OrganizationCreateEvent
   */
  listenToOrganizationCreateEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["OrganizationCreateEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity OrganizationAttributeValueChangeEvent
   * @description Example of a client listener for receiving the notification OrganizationAttributeValueChangeEvent
   */
  listenToOrganizationAttributeValueChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["OrganizationAttributeValueChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity OrganizationStateChangeEvent
   * @description Example of a client listener for receiving the notification OrganizationStateChangeEvent
   */
  listenToOrganizationStateChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["OrganizationStateChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity OrganizationDeleteEvent
   * @description Example of a client listener for receiving the notification OrganizationDeleteEvent
   */
  listenToOrganizationDeleteEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["OrganizationDeleteEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity IndividualCreateEvent
   * @description Example of a client listener for receiving the notification IndividualCreateEvent
   */
  listenToIndividualCreateEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["IndividualCreateEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity IndividualAttributeValueChangeEvent
   * @description Example of a client listener for receiving the notification IndividualAttributeValueChangeEvent
   */
  listenToIndividualAttributeValueChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["IndividualAttributeValueChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity IndividualStateChangeEvent
   * @description Example of a client listener for receiving the notification IndividualStateChangeEvent
   */
  listenToIndividualStateChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["IndividualStateChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity IndividualDeleteEvent
   * @description Example of a client listener for receiving the notification IndividualDeleteEvent
   */
  listenToIndividualDeleteEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["IndividualDeleteEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
}
