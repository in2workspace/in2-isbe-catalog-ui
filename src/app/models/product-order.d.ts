/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/productOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List or find ProductOrder objects
         * @description This operation list or find ProductOrder entities
         */
        get: operations["listProductOrder"];
        put?: never;
        /**
         * Creates a ProductOrder
         * @description This operation creates a ProductOrder entity.
         */
        post: operations["createProductOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/productOrder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a ProductOrder by ID
         * @description This operation retrieves a ProductOrder entity. Attribute selection is enabled for all first level attributes.
         */
        get: operations["retrieveProductOrder"];
        put?: never;
        post?: never;
        /**
         * Deletes a ProductOrder
         * @description This operation deletes a ProductOrder entity.
         */
        delete: operations["deleteProductOrder"];
        options?: never;
        head?: never;
        /**
         * Updates partially a ProductOrder
         * @description This operation updates partially a ProductOrder entity.
         */
        patch: operations["patchProductOrder"];
        trace?: never;
    };
    "/cancelProductOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List or find CancelProductOrder objects
         * @description This operation list or find CancelProductOrder entities
         */
        get: operations["listCancelProductOrder"];
        put?: never;
        /**
         * Creates a CancelProductOrder
         * @description This operation creates a CancelProductOrder entity.
         */
        post: operations["createCancelProductOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cancelProductOrder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a CancelProductOrder by ID
         * @description This operation retrieves a CancelProductOrder entity. Attribute selection is enabled for all first level attributes.
         */
        get: operations["retrieveCancelProductOrder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hub": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a listener
         * @description Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
         */
        post: operations["registerListener"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hub/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unregister a listener
         * @description Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
         */
        delete: operations["unregisterListener"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/productOrderCreateEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity ProductOrderCreateEvent
         * @description Example of a client listener for receiving the notification ProductOrderCreateEvent
         */
        post: operations["listenToProductOrderCreateEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/productOrderAttributeValueChangeEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity ProductOrderAttributeValueChangeEvent
         * @description Example of a client listener for receiving the notification ProductOrderAttributeValueChangeEvent
         */
        post: operations["listenToProductOrderAttributeValueChangeEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/productOrderDeleteEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity ProductOrderDeleteEvent
         * @description Example of a client listener for receiving the notification ProductOrderDeleteEvent
         */
        post: operations["listenToProductOrderDeleteEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/productOrderStateChangeEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity ProductOrderStateChangeEvent
         * @description Example of a client listener for receiving the notification ProductOrderStateChangeEvent
         */
        post: operations["listenToProductOrderStateChangeEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/productOrderInformationRequiredEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity ProductOrderInformationRequiredEvent
         * @description Example of a client listener for receiving the notification ProductOrderInformationRequiredEvent
         */
        post: operations["listenToProductOrderInformationRequiredEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/cancelProductOrderCreateEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity CancelProductOrderCreateEvent
         * @description Example of a client listener for receiving the notification CancelProductOrderCreateEvent
         */
        post: operations["listenToCancelProductOrderCreateEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/cancelProductOrderStateChangeEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity CancelProductOrderStateChangeEvent
         * @description Example of a client listener for receiving the notification CancelProductOrderStateChangeEvent
         */
        post: operations["listenToCancelProductOrderStateChangeEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listener/cancelProductOrderInformationRequiredEvent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Client listener for entity CancelProductOrderInformationRequiredEvent
         * @description Example of a client listener for receiving the notification CancelProductOrderInformationRequiredEvent
         */
        post: operations["listenToCancelProductOrderInformationRequiredEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications. */
        AgreementItemRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Identifier of the agreement */
            agreementItemId?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications. */
        AgreementRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the agreement */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        Any: Record<string, never>;
        /** @description Refers an appointment, such as a Customer presentation or internal meeting or site visit */
        AppointmentRef: {
            /** @description The identifier of the referred appointment */
            id: string;
            /** @description The reference of the appointment */
            href?: string;
            /** @description An explanatory text regarding the appointment made with a party */
            description?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation */
            "@referredType"?: string;
        };
        /** @description BillingAccount reference. A BillingAccount is a detailed description of a bill structure. */
        BillingAccountRef: {
            /** @description Unique identifier of the billing account */
            id: string;
            /** @description Reference of the billing account */
            href?: string;
            /** @description Name of the billing account */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description A Order cancel is a type of task which  can  be used to place a request to cancel an order */
        CancelOrder: {
            /** @description id of the cancellation request (this is not an order id) */
            id?: string;
            /** @description Hyperlink to access the cancellation request */
            href?: string;
            /** @description Reason why the order is cancelled. */
            cancellationReason?: string;
            /**
             * Format: date-time
             * @description Date when the order is cancelled.
             */
            effectiveCancellationDate?: string;
            /**
             * Format: date-time
             * @description Date when the submitter wants the order to be cancelled
             */
            requestedCancellationDate?: string;
            state?: components["schemas"]["TaskStateType"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Request for cancellation an existing product order */
        CancelProductOrder: {
            /** @description id of the cancellation request (this is not an order id) */
            id?: string;
            /** @description Hyperlink to access the cancellation request */
            href?: string;
            /** @description Reason why the order is cancelled. */
            cancellationReason?: string;
            /**
             * Format: date-time
             * @description Date when the order is cancelled.
             */
            effectiveCancellationDate?: string;
            /**
             * Format: date-time
             * @description Date when the submitter wants the order to be cancelled
             */
            requestedCancellationDate?: string;
            productOrder: components["schemas"]["ProductOrderRef"];
            state?: components["schemas"]["TaskStateType"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Request for cancellation an existing product order
         *     Skipped properties: id,href,state,effectiveCancellationDate */
        CancelProductOrder_Create: {
            /** @description Reason why the order is cancelled. */
            cancellationReason?: string;
            /**
             * Format: date-time
             * @description Date when the submitter wants the order to be cancelled
             */
            requestedCancellationDate?: string;
            productOrder: components["schemas"]["ProductOrderRef"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Describes a given characteristic of an object or entity through a name/value pair. */
        Characteristic: {
            /** @description Name of the characteristic */
            name: string;
            /** @description Data type of the value of the characteristic */
            valueType?: string;
            value: components["schemas"]["Any"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Entity reference schema to be use for all entityRef class. */
        EntityRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description A base / value business entity used to represent money */
        Money: {
            /** @description Currency (ISO4217 norm uses 3 letters to define the currency) */
            unit?: string;
            /**
             * Format: float
             * @description A positive floating point number
             */
            value?: number;
        };
        /** @description Extra information about a given entity */
        Note: {
            /** @description Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation) */
            id?: string;
            /** @description Author of the note */
            author?: string;
            /**
             * Format: date-time
             * @description Date of the note
             */
            date?: string;
            /** @description Text of the note */
            text: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /**
         * @description action to be performed on the product
         * @enum {string}
         */
        OrderItemActionType: "add" | "modify" | "delete" | "noChange";
        OrderItemRelationship: {
            id?: string;
            /** @description The type of order item relationship */
            relationshipType?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description An amount, usually of money, that represents the actual price paid by the Customer for this item or this order */
        OrderPrice: {
            /** @description A narrative that explains in detail the semantics of this order item price. */
            description?: string;
            /** @description A short descriptive name such as "Subscription price". */
            name?: string;
            /** @description A category that describes the price, such as recurring, discount, allowance, penalty, and so forth */
            priceType?: string;
            /** @description Could be month, week... */
            recurringChargePeriod?: string;
            /** @description Could be minutes, GB... */
            unitOfMeasure?: string;
            billingAccount?: components["schemas"]["BillingAccountRef"];
            price?: components["schemas"]["Price"];
            /** @description a strucuture used to describe a price alteration */
            priceAlteration?: components["schemas"]["PriceAlteration"][];
            productOfferingPrice?: components["schemas"]["ProductOfferingPriceRef"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Description of a productTerm linked to this orderItem. This represent a commitment with a duration */
        OrderTerm: {
            /** @description Description of the productOrderTerm */
            description?: string;
            /** @description Name of the productOrderTerm */
            name?: string;
            duration?: components["schemas"]["Quantity"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description If an immediate payment has been done at the product order submission, the payment information are captured and stored (as a reference) in the order. */
        PaymentRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description A name for the payment */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description Place reference. Place defines the places where the products are sold or delivered. */
        Place: {
            /** @description Unique identifier of the place */
            id?: string;
            /** @description Unique reference of the place */
            href?: string;
            /** @description A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home] */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Place reference. PlaceRef defines the placeRefs where the products are sold or delivered. */
        PlaceRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration. */
        Price: {
            /**
             * Format: float
             * @description Percentage to apply for ProdOfferPriceAlteration
             */
            percentage?: number;
            /**
             * Format: float
             * @description Tax rate
             */
            taxRate?: number;
            dutyFreeAmount?: components["schemas"]["Money"];
            taxIncludedAmount?: components["schemas"]["Money"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Is an amount, usually of money, that modifies the price charged for an order item. */
        PriceAlteration: {
            /** @description Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge) */
            applicationDuration?: number;
            /** @description A narrative that explains in detail the semantics of this order item price alteration */
            description?: string;
            /** @description Name of the order item price alteration */
            name?: string;
            /** @description A category that describes the price such as recurring, one time and usage. */
            priceType: string;
            /** @description Priority level for applying this alteration among all the defined alterations on the order item price */
            priority?: number;
            /** @description Could be month, week... */
            recurringChargePeriod?: string;
            /** @description Could be minutes, GB... */
            unitOfMeasure?: string;
            price: components["schemas"]["Price"];
            productOfferingPrice?: components["schemas"]["ProductOfferingPriceRef"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s). */
        Product: {
            /** @description Unique identifier of the product */
            id?: string;
            /** @description Reference of the product */
            href?: string;
            /** @description Is the description of the product. It could be copied from the description of the Product Offering. */
            description?: string;
            /** @description If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering. */
            isBundle?: boolean;
            /** @description If true, the product is visible by the customer. */
            isCustomerVisible?: boolean;
            /** @description Name of the product. It could be the same as the name of the product offering */
            name?: string;
            /**
             * Format: date-time
             * @description Is the date when the product was ordered
             */
            orderDate?: string;
            /** @description Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router. */
            productSerialNumber?: string;
            /**
             * Format: date-time
             * @description Is the date from which the product starts
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Is the date when the product was terminated
             */
            terminationDate?: string;
            agreement?: components["schemas"]["AgreementItemRef"][];
            billingAccount?: components["schemas"]["BillingAccountRef"];
            place?: components["schemas"]["RelatedPlaceRefOrValue"][];
            product?: components["schemas"]["ProductRefOrValue"][];
            productCharacteristic?: components["schemas"]["Characteristic"][];
            productOffering?: components["schemas"]["ProductOfferingRef"];
            productOrderItem?: components["schemas"]["RelatedProductOrderItem"][];
            productPrice?: components["schemas"]["ProductPrice"][];
            productRelationship?: components["schemas"]["ProductRelationship"][];
            productSpecification?: components["schemas"]["ProductSpecificationRef"];
            productTerm?: components["schemas"]["ProductTerm"][];
            realizingResource?: components["schemas"]["ResourceRef"][];
            realizingService?: components["schemas"]["ServiceRef"][];
            relatedParty?: components["schemas"]["RelatedParty"][];
            status?: components["schemas"]["ProductStatusType"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased */
        ProductOfferingPriceRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description It's a productOfferingQualification item that has been executed previously. */
        ProductOfferingQualificationItemRef: {
            /** @description Id of an item of a product offering qualification */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description Reference of the related entity. */
            productOfferingQualificationHref?: string;
            /** @description Unique identifier of a related entity. */
            productOfferingQualificationId: string;
            /** @description Name of the related entity. */
            productOfferingQualificationName?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description It's a productOfferingQualification that has been executed previously */
        ProductOfferingQualificationRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information. */
        ProductOfferingRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description A Product Order is a type of order which  can  be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa, */
        ProductOrder: {
            /** @description ID created on repository side (OM system) */
            id?: string;
            /** @description Hyperlink to access the order */
            href?: string;
            /**
             * Format: date-time
             * @description Date when the order is cancelled. This is used when order is cancelled.
             */
            cancellationDate?: string;
            /** @description Reason why the order is cancelled. This is used when order is cancelled.  */
            cancellationReason?: string;
            /** @description Used to categorize the order from a business perspective that can be useful for the OM system (e.g. "enterprise", "residential", ...) */
            category?: string;
            /**
             * Format: date-time
             * @description Date when the order was completed
             */
            completionDate?: string;
            /** @description Description of the product order */
            description?: string;
            /**
             * Format: date-time
             * @description Expected delivery date amended by the provider
             */
            expectedCompletionDate?: string;
            /** @description ID given by the consumer and only understandable by him (to facilitate his searches afterwards) */
            externalId?: string;
            /** @description Contact attached to the order to send back information regarding this order */
            notificationContact?: string;
            /**
             * Format: date-time
             * @description Date when the order was created
             */
            orderDate?: string;
            /** @description A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest) */
            priority?: string;
            /**
             * Format: date-time
             * @description Requested delivery date from the requestor perspective
             */
            requestedCompletionDate?: string;
            /**
             * Format: date-time
             * @description Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date.
             */
            requestedStartDate?: string;
            /** @description A reference to an agreement defined in the context of the product order */
            agreement?: components["schemas"]["AgreementRef"][];
            billingAccount?: components["schemas"]["BillingAccountRef"];
            channel?: components["schemas"]["RelatedChannel"][];
            note?: components["schemas"]["Note"][];
            orderTotalPrice?: components["schemas"]["OrderPrice"][];
            payment?: components["schemas"]["PaymentRef"][];
            productOfferingQualification?: components["schemas"]["ProductOfferingQualificationRef"][];
            productOrderItem: components["schemas"]["ProductOrderItem"][];
            quote?: components["schemas"]["QuoteRef"][];
            relatedParty?: components["schemas"]["RelatedParty"][];
            state?: components["schemas"]["ProductOrderStateType"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description A Product Order is a type of order which  can  be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa,
         *     Skipped properties: id,href,completionDate,orderDate,state,expectedCompletionDate,productOrderItem.state */
        ProductOrder_Create: {
            /**
             * Format: date-time
             * @description Date when the order is cancelled. This is used when order is cancelled.
             */
            cancellationDate?: string;
            /** @description Reason why the order is cancelled. This is used when order is cancelled.  */
            cancellationReason?: string;
            /** @description Used to categorize the order from a business perspective that can be useful for the OM system (e.g. "enterprise", "residential", ...) */
            category?: string;
            /** @description Description of the product order */
            description?: string;
            /** @description ID given by the consumer and only understandable by him (to facilitate his searches afterwards) */
            externalId?: string;
            /** @description Contact attached to the order to send back information regarding this order */
            notificationContact?: string;
            /** @description A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest) */
            priority?: string;
            /**
             * Format: date-time
             * @description Requested delivery date from the requestor perspective
             */
            requestedCompletionDate?: string;
            /**
             * Format: date-time
             * @description Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date.
             */
            requestedStartDate?: string;
            /** @description A reference to an agreement defined in the context of the product order */
            agreement?: components["schemas"]["AgreementRef"][];
            billingAccount?: components["schemas"]["BillingAccountRef"];
            channel?: components["schemas"]["RelatedChannel"][];
            note?: components["schemas"]["Note"][];
            orderTotalPrice?: components["schemas"]["OrderPrice"][];
            payment?: components["schemas"]["PaymentRef"][];
            productOfferingQualification?: components["schemas"]["ProductOfferingQualificationRef"][];
            productOrderItem: components["schemas"]["ProductOrderItem"][];
            quote?: components["schemas"]["QuoteRef"][];
            relatedParty?: components["schemas"]["RelatedParty"][];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description A Product Order is a type of order which  can  be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa,
         *     Skipped properties: id,href,orderDate */
        ProductOrder_Update: {
            /**
             * Format: date-time
             * @description Date when the order is cancelled. This is used when order is cancelled.
             */
            cancellationDate?: string;
            /** @description Reason why the order is cancelled. This is used when order is cancelled.  */
            cancellationReason?: string;
            /** @description Used to categorize the order from a business perspective that can be useful for the OM system (e.g. "enterprise", "residential", ...) */
            category?: string;
            /**
             * Format: date-time
             * @description Date when the order was completed
             */
            completionDate?: string;
            /** @description Description of the product order */
            description?: string;
            /**
             * Format: date-time
             * @description Expected delivery date amended by the provider
             */
            expectedCompletionDate?: string;
            /** @description ID given by the consumer and only understandable by him (to facilitate his searches afterwards) */
            externalId?: string;
            /** @description Contact attached to the order to send back information regarding this order */
            notificationContact?: string;
            /** @description A way that can be used by consumers to prioritize orders in OM system (from 0 to 4 : 0 is the highest priority, and 4 the lowest) */
            priority?: string;
            /**
             * Format: date-time
             * @description Requested delivery date from the requestor perspective
             */
            requestedCompletionDate?: string;
            /**
             * Format: date-time
             * @description Order fulfillment start date wished by the requestor. This is used when, for any reason, requestor cannot allow seller to begin to operationally begin the fulfillment before a date.
             */
            requestedStartDate?: string;
            /** @description A reference to an agreement defined in the context of the product order */
            agreement?: components["schemas"]["AgreementRef"][];
            billingAccount?: components["schemas"]["BillingAccountRef"];
            channel?: components["schemas"]["RelatedChannel"][];
            note?: components["schemas"]["Note"][];
            orderTotalPrice?: components["schemas"]["OrderPrice"][];
            payment?: components["schemas"]["PaymentRef"][];
            productOfferingQualification?: components["schemas"]["ProductOfferingQualificationRef"][];
            productOrderItem: components["schemas"]["ProductOrderItem"][];
            quote?: components["schemas"]["QuoteRef"][];
            relatedParty?: components["schemas"]["RelatedParty"][];
            state?: components["schemas"]["ProductOrderStateType"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description An identified part of the order. A product order is decomposed into one or more order items. */
        ProductOrderItem: {
            /** @description Identifier of the line item (generally it is a sequence number 01, 02, 03, ...) */
            id: string;
            /** @description Quantity ordered */
            quantity?: number;
            action: components["schemas"]["OrderItemActionType"];
            appointment?: components["schemas"]["AppointmentRef"];
            billingAccount?: components["schemas"]["BillingAccountRef"];
            itemPrice?: components["schemas"]["OrderPrice"][];
            itemTerm?: components["schemas"]["OrderTerm"][];
            itemTotalPrice?: components["schemas"]["OrderPrice"][];
            payment?: components["schemas"]["PaymentRef"][];
            product?: components["schemas"]["ProductRefOrValue"];
            productOffering?: components["schemas"]["ProductOfferingRef"];
            productOfferingQualificationItem?: components["schemas"]["ProductOfferingQualificationItemRef"];
            productOrderItem?: components["schemas"]["ProductOrderItem"][];
            productOrderItemRelationship?: components["schemas"]["OrderItemRelationship"][];
            qualification?: components["schemas"]["ProductOfferingQualificationRef"][];
            quoteItem?: components["schemas"]["QuoteItemRef"];
            state?: components["schemas"]["ProductOrderItemStateType"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /**
         * @description Possible values for the state of the product order item
         * @enum {string}
         */
        ProductOrderItemStateType: "acknowledged" | "rejected" | "pending" | "held" | "inProgress" | "cancelled" | "completed" | "failed" | "assessingCancellation" | "pendingCancellation";
        /** @description ProductOrder (ProductOrder) .The product order which the recommendation is related with. */
        ProductOrderRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /**
         * @description Possible values for the state of the order
         * @enum {string}
         */
        ProductOrderStateType: "acknowledged" | "rejected" | "pending" | "held" | "inProgress" | "cancelled" | "completed" | "failed" | "partial" | "assessingCancellation" | "pendingCancellation";
        /** @description An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time. */
        ProductPrice: {
            /** @description A narrative that explains in detail the semantics of this product price. */
            description?: string;
            /** @description A short descriptive name such as "Subscription price". */
            name?: string;
            /** @description A category that describes the price, such as recurring, discount, allowance, penalty, and so forth. */
            priceType: string;
            /** @description Could be month, week... */
            recurringChargePeriod?: string;
            /** @description Could be minutes, GB... */
            unitOfMeasure?: string;
            billingAccount?: components["schemas"]["BillingAccountRef"];
            price: components["schemas"]["Price"];
            productOfferingPrice?: components["schemas"]["ProductOfferingPriceRef"];
            productPriceAlteration?: components["schemas"]["PriceAlteration"][];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        ProductRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself */
        ProductRefOrValue: {
            /** @description Unique identifier of the product */
            id?: string;
            /** @description Reference of the product */
            href?: string;
            /** @description Is the description of the product. It could be copied from the description of the Product Offering. */
            description?: string;
            /** @description If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering. */
            isBundle?: boolean;
            /** @description If true, the product is visible by the customer. */
            isCustomerVisible?: boolean;
            /** @description Name of the product. It could be the same as the name of the product offering */
            name?: string;
            /**
             * Format: date-time
             * @description Is the date when the product was ordered
             */
            orderDate?: string;
            /** @description Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router. */
            productSerialNumber?: string;
            /**
             * Format: date-time
             * @description Is the date from which the product starts
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Is the date when the product was terminated
             */
            terminationDate?: string;
            agreement?: components["schemas"]["AgreementItemRef"][];
            billingAccount?: components["schemas"]["BillingAccountRef"];
            place?: components["schemas"]["RelatedPlaceRefOrValue"][];
            product?: components["schemas"]["ProductRefOrValue"][];
            productCharacteristic?: components["schemas"]["Characteristic"][];
            productOffering?: components["schemas"]["ProductOfferingRef"];
            productOrderItem?: components["schemas"]["RelatedProductOrderItem"][];
            productPrice?: components["schemas"]["ProductPrice"][];
            productRelationship?: components["schemas"]["ProductRelationship"][];
            productSpecification?: components["schemas"]["ProductSpecificationRef"];
            productTerm?: components["schemas"]["ProductTerm"][];
            realizingResource?: components["schemas"]["ResourceRef"][];
            realizingService?: components["schemas"]["ServiceRef"][];
            relatedParty?: components["schemas"]["RelatedParty"][];
            status?: components["schemas"]["ProductStatusType"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful */
        ProductRelationship: {
            /** @description Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful */
            relationshipType: string;
            product: components["schemas"]["ProductRefOrValue"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role. */
        ProductSpecificationRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description Version of the product specification */
            version?: string;
            targetProductSchema?: components["schemas"]["TargetProductSchema"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /**
         * @description Possible values for the status of the product
         * @enum {string}
         */
        ProductStatusType: "created" | "pendingActive" | "cancelled" | "active" | "pendingTerminate" | "terminated" | "suspended" | "aborted ";
        /** @description Description of a productTerm linked to this product. This represent a commitment with a duration */
        ProductTerm: {
            /** @description Description of the productTerm */
            description?: string;
            /** @description Name of the productTerm */
            name?: string;
            duration?: components["schemas"]["Quantity"];
            validFor?: components["schemas"]["TimePeriod"];
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
        };
        /** @description An amount in a given unit */
        Quantity: {
            /**
             * Format: float
             * @description Numeric value in a given unit
             * @default 1
             */
            amount: number;
            /** @description Unit */
            units?: string;
        };
        /** @description It's a Quote item that has been executed previously. */
        QuoteItemRef: {
            /** @description Id of an item of a quote */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description Reference of the related entity. */
            quoteHref?: string;
            /** @description Unique identifier of a related entity. */
            quoteId: string;
            /** @description Name of the related entity. */
            quoteName?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description It's a Quote that has been executed previously */
        QuoteRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description Related channel to another entity. May be online web, mobile app, social ,etc. */
        RelatedChannel: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the channel. */
            name?: string;
            /** @description Role playing by the channel. */
            role?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description Related Entity reference. A related party defines party or party role linked to a specific entity. */
        RelatedParty: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description Role played by the related party */
            role?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType": string;
        };
        /** @description Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself */
        RelatedPlaceRefOrValue: {
            /** @description Unique identifier of the place */
            id?: string;
            /** @description Unique reference of the place */
            href?: string;
            /** @description A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home] */
            name?: string;
            role: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination. */
        RelatedProductOrderItem: {
            /** @description Action of the order item for this product */
            orderItemAction?: string;
            /** @description Identifier of the order item where the product was managed */
            orderItemId: string;
            /** @description Reference of the related entity. */
            productOrderHref?: string;
            /** @description Unique identifier of a related entity. */
            productOrderId: string;
            /** @description role of the product order item for this product */
            role?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        ResourceRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the resource */
            name?: string;
            /** @description The resource value that can be used to identify a resource with a public key (e.g.: a tel nr, an msisdn) */
            value?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description Service reference, for when Service is used by other entities */
        ServiceRef: {
            /** @description Unique identifier of a related entity. */
            id: string;
            /** @description Reference of the related entity. */
            href?: string;
            /** @description Name of the related entity. */
            name?: string;
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name */
            "@type"?: string;
            /** @description The actual type of the target instance when needed for disambiguation. */
            "@referredType"?: string;
        };
        /** @description The reference object to the schema and type of target product which is described by product specification */
        TargetProductSchema: {
            /** @description When sub-classing, this defines the super-class */
            "@baseType"?: string;
            /** @description This field provides a link to the schema describing the target product */
            "@schemaLocation": string;
            /** @description Class type of the target product */
            "@type": string;
        };
        /**
         * @description Possible values for the state of a task
         * @enum {string}
         */
        TaskStateType: "acknowledged" | "terminatedWithError" | "inProgress" | "done";
        /** @description A period of time, either as a deadline (endDateTime only) a startDateTime only, or both */
        TimePeriod: {
            /**
             * Format: date-time
             * @description End of the time period, using IETC-RFC-3339 format
             */
            endDateTime?: string;
            /**
             * Format: date-time
             * @description Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end
             */
            startDateTime?: string;
        };
        /** @description Sets the communication endpoint address the service instance must use to deliver notification information */
        EventSubscription: {
            /** @description Id of the listener */
            id: string;
            /** @description The callback being registered. */
            callback: string;
            /** @description additional data to be passed */
            query?: string;
        };
        /** @description Sets the communication endpoint address the service instance must use to deliver notification information */
        EventSubscriptionInput: {
            /** @description The callback being registered. */
            callback: string;
            /** @description additional data to be passed */
            query?: string;
        };
        /** @description The notification data structure */
        ProductOrderCreateEvent: {
            /** @description Identifier of the Process flow */
            id?: string;
            /** @description Reference of the ProcessFlow */
            href?: string;
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            event?: components["schemas"]["ProductOrderCreateEventPayload"];
        };
        /** @description The event data structure */
        ProductOrderCreateEventPayload: {
            productOrder?: components["schemas"]["ProductOrder"];
        };
        /** @description The notification data structure */
        ProductOrderAttributeValueChangeEvent: {
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            /** @description The path identifying the object field concerned by this notification. */
            fieldPath?: string;
            event?: components["schemas"]["ProductOrderAttributeValueChangeEventPayload"];
        };
        /** @description The event data structure */
        ProductOrderAttributeValueChangeEventPayload: {
            productOrder?: components["schemas"]["ProductOrder"];
        };
        /** @description The notification data structure */
        ProductOrderDeleteEvent: {
            /** @description Identifier of the Process flow */
            id?: string;
            /** @description Reference of the ProcessFlow */
            href?: string;
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            event?: components["schemas"]["ProductOrderDeleteEventPayload"];
        };
        /** @description The event data structure */
        ProductOrderDeleteEventPayload: {
            productOrder?: components["schemas"]["ProductOrder"];
        };
        /** @description The notification data structure */
        ProductOrderStateChangeEvent: {
            /** @description Identifier of the Process flow */
            id?: string;
            /** @description Reference of the ProcessFlow */
            href?: string;
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            event?: components["schemas"]["ProductOrderStateChangeEventPayload"];
        };
        /** @description The event data structure */
        ProductOrderStateChangeEventPayload: {
            productOrder?: components["schemas"]["ProductOrder"];
        };
        /** @description The notification data structure */
        ProductOrderInformationRequiredEvent: {
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            /** @description The path identifying the object field concerned by this notification. */
            fieldPath?: string;
            event?: components["schemas"]["ProductOrderInformationRequiredEventPayload"];
        };
        /** @description The event data structure */
        ProductOrderInformationRequiredEventPayload: {
            productOrder?: components["schemas"]["ProductOrder"];
        };
        /** @description The notification data structure */
        CancelProductOrderCreateEvent: {
            /** @description Identifier of the Process flow */
            id?: string;
            /** @description Reference of the ProcessFlow */
            href?: string;
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            event?: components["schemas"]["CancelProductOrderCreateEventPayload"];
        };
        /** @description The event data structure */
        CancelProductOrderCreateEventPayload: {
            cancelProductOrder?: components["schemas"]["CancelProductOrder"];
        };
        /** @description The notification data structure */
        CancelProductOrderStateChangeEvent: {
            /** @description Identifier of the Process flow */
            id?: string;
            /** @description Reference of the ProcessFlow */
            href?: string;
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            event?: components["schemas"]["CancelProductOrderStateChangeEventPayload"];
        };
        /** @description The event data structure */
        CancelProductOrderStateChangeEventPayload: {
            cancelProductOrder?: components["schemas"]["CancelProductOrder"];
        };
        /** @description The notification data structure */
        CancelProductOrderInformationRequiredEvent: {
            /** @description The identifier of the notification. */
            eventId?: string;
            /**
             * Format: date-time
             * @description Time of the event occurrence.
             */
            eventTime?: string;
            /** @description The type of the notification. */
            eventType?: string;
            /** @description The correlation id for this event. */
            correlationId?: string;
            /** @description The domain of the event. */
            domain?: string;
            /** @description The title of the event. */
            title?: string;
            /** @description An explnatory of the event. */
            description?: string;
            /** @description A priority. */
            priority?: string;
            /**
             * Format: date-time
             * @description The time the event occured.
             */
            timeOcurred?: string;
            /** @description The path identifying the object field concerned by this notification. */
            fieldPath?: string;
            event?: components["schemas"]["CancelProductOrderInformationRequiredEventPayload"];
        };
        /** @description The event data structure */
        CancelProductOrderInformationRequiredEventPayload: {
            cancelProductOrder?: components["schemas"]["CancelProductOrder"];
        };
        /** @description Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx) */
        Error: {
            /** @description Application relevant detail, defined in the API or a common list. */
            code: string;
            /** @description Explanation of the reason for the error which can be shown to a client user. */
            reason: string;
            /** @description More details and corrective actions related to the error which can be shown to a client user. */
            message?: string;
            /** @description HTTP Error code extension */
            status?: string;
            /**
             * Format: uri
             * @description URI of documentation describing the error.
             */
            referenceError?: string;
            /** @description When sub-classing, this defines the super-class. */
            "@baseType"?: string;
            /**
             * Format: uri
             * @description A URI to a JSON-Schema file that defines additional attributes and relationships
             */
            "@schemaLocation"?: string;
            /** @description When sub-classing, this defines the sub-class entity name. */
            "@type"?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listProductOrder: {
        parameters: {
            query?: {
                /** @description Comma-separated properties to be provided in response */
                fields?: string;
                /** @description Requested index for start of resources to be provided in response */
                offset?: number;
                /** @description Requested number of resources to be provided in response */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    /** @description Total number of items matching criteria */
                    "X-Total-Count"?: number;
                    /** @description Actual number of items returned in the response body */
                    "X-Result-Count"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["ProductOrder"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    createProductOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The ProductOrder to be created */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ProductOrder_Create"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["ProductOrder"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    retrieveProductOrder: {
        parameters: {
            query?: {
                /** @description Comma-separated properties to provide in response */
                fields?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the ProductOrder */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["ProductOrder"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteProductOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the ProductOrder */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    patchProductOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Identifier of the ProductOrder */
                id: string;
            };
            cookie?: never;
        };
        /** @description The ProductOrder to be updated */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ProductOrder_Update"];
            };
        };
        responses: {
            /** @description Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["ProductOrder"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listCancelProductOrder: {
        parameters: {
            query?: {
                /** @description Comma-separated properties to be provided in response */
                fields?: string;
                /** @description Requested index for start of resources to be provided in response */
                offset?: number;
                /** @description Requested number of resources to be provided in response */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    /** @description Total number of items matching criteria */
                    "X-Total-Count"?: number;
                    /** @description Actual number of items returned in the response body */
                    "X-Result-Count"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["CancelProductOrder"][];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    createCancelProductOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The CancelProductOrder to be created */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["CancelProductOrder_Create"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["CancelProductOrder"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    retrieveCancelProductOrder: {
        parameters: {
            query?: {
                /** @description Comma-separated properties to provide in response */
                fields?: string;
            };
            header?: never;
            path: {
                /** @description Identifier of the CancelProductOrder */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["CancelProductOrder"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    registerListener: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Data containing the callback endpoint to deliver the information */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["EventSubscriptionInput"];
            };
        };
        responses: {
            /** @description Subscribed */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    unregisterListener: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the registered listener */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToProductOrderCreateEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ProductOrderCreateEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToProductOrderAttributeValueChangeEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ProductOrderAttributeValueChangeEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToProductOrderDeleteEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ProductOrderDeleteEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToProductOrderStateChangeEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ProductOrderStateChangeEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToProductOrderInformationRequiredEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["ProductOrderInformationRequiredEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToCancelProductOrderCreateEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["CancelProductOrderCreateEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToCancelProductOrderStateChangeEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["CancelProductOrderStateChangeEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
    listenToCancelProductOrderInformationRequiredEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The event data */
        requestBody: {
            content: {
                "application/json;charset=utf-8": components["schemas"]["CancelProductOrderInformationRequiredEvent"];
            };
        };
        responses: {
            /** @description Notified */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Method Not allowed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=utf-8": components["schemas"]["Error"];
                };
            };
        };
    };
}
