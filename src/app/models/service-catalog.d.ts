/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/serviceCatalog": {
    /**
     * List or find ServiceCatalog objects
     * @description This operation list or find ServiceCatalog entities
     */
    get: operations["listServiceCatalog"];
    /**
     * Creates a ServiceCatalog
     * @description This operation creates a ServiceCatalog entity.
     */
    post: operations["createServiceCatalog"];
  };
  "/serviceCatalog/{id}": {
    /**
     * Retrieves a ServiceCatalog by ID
     * @description This operation retrieves a ServiceCatalog entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveServiceCatalog"];
    /**
     * Deletes a ServiceCatalog
     * @description This operation deletes a ServiceCatalog entity.
     */
    delete: operations["deleteServiceCatalog"];
    /**
     * Updates partially a ServiceCatalog
     * @description This operation updates partially a ServiceCatalog entity.
     */
    patch: operations["patchServiceCatalog"];
  };
  "/serviceCategory": {
    /**
     * List or find ServiceCategory objects
     * @description This operation list or find ServiceCategory entities
     */
    get: operations["listServiceCategory"];
    /**
     * Creates a ServiceCategory
     * @description This operation creates a ServiceCategory entity.
     */
    post: operations["createServiceCategory"];
  };
  "/serviceCategory/{id}": {
    /**
     * Retrieves a ServiceCategory by ID
     * @description This operation retrieves a ServiceCategory entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveServiceCategory"];
    /**
     * Deletes a ServiceCategory
     * @description This operation deletes a ServiceCategory entity.
     */
    delete: operations["deleteServiceCategory"];
    /**
     * Updates partially a ServiceCategory
     * @description This operation updates partially a ServiceCategory entity.
     */
    patch: operations["patchServiceCategory"];
  };
  "/serviceCandidate": {
    /**
     * List or find ServiceCandidate objects
     * @description This operation list or find ServiceCandidate entities
     */
    get: operations["listServiceCandidate"];
    /**
     * Creates a ServiceCandidate
     * @description This operation creates a ServiceCandidate entity.
     */
    post: operations["createServiceCandidate"];
  };
  "/serviceCandidate/{id}": {
    /**
     * Retrieves a ServiceCandidate by ID
     * @description This operation retrieves a ServiceCandidate entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveServiceCandidate"];
    /**
     * Deletes a ServiceCandidate
     * @description This operation deletes a ServiceCandidate entity.
     */
    delete: operations["deleteServiceCandidate"];
    /**
     * Updates partially a ServiceCandidate
     * @description This operation updates partially a ServiceCandidate entity.
     */
    patch: operations["patchServiceCandidate"];
  };
  "/serviceSpecification": {
    /**
     * List or find ServiceSpecification objects
     * @description This operation list or find ServiceSpecification entities
     */
    get: operations["listServiceSpecification"];
    /**
     * Creates a ServiceSpecification
     * @description This operation creates a ServiceSpecification entity.
     */
    post: operations["createServiceSpecification"];
  };
  "/serviceSpecification/{id}": {
    /**
     * Retrieves a ServiceSpecification by ID
     * @description This operation retrieves a ServiceSpecification entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveServiceSpecification"];
    /**
     * Deletes a ServiceSpecification
     * @description This operation deletes a ServiceSpecification entity.
     */
    delete: operations["deleteServiceSpecification"];
    /**
     * Updates partially a ServiceSpecification
     * @description This operation updates partially a ServiceSpecification entity.
     */
    patch: operations["patchServiceSpecification"];
  };
  "/importJob": {
    /**
     * List or find ImportJob objects
     * @description This operation list or find ImportJob entities
     */
    get: operations["listImportJob"];
    /**
     * Creates a ImportJob
     * @description This operation creates a ImportJob entity.
     */
    post: operations["createImportJob"];
  };
  "/importJob/{id}": {
    /**
     * Retrieves a ImportJob by ID
     * @description This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveImportJob"];
    /**
     * Deletes a ImportJob
     * @description This operation deletes a ImportJob entity.
     */
    delete: operations["deleteImportJob"];
  };
  "/exportJob": {
    /**
     * List or find ExportJob objects
     * @description This operation list or find ExportJob entities
     */
    get: operations["listExportJob"];
    /**
     * Creates a ExportJob
     * @description This operation creates a ExportJob entity.
     */
    post: operations["createExportJob"];
  };
  "/exportJob/{id}": {
    /**
     * Retrieves a ExportJob by ID
     * @description This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.
     */
    get: operations["retrieveExportJob"];
    /**
     * Deletes a ExportJob
     * @description This operation deletes a ExportJob entity.
     */
    delete: operations["deleteExportJob"];
  };
  "/hub": {
    /**
     * Register a listener
     * @description Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
     */
    post: operations["registerListener"];
  };
  "/hub/{id}": {
    /**
     * Unregister a listener
     * @description Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
     */
    delete: operations["unregisterListener"];
  };
  "/listener/serviceCatalogCreateEvent": {
    /**
     * Client listener for entity ServiceCatalogCreateEvent
     * @description Example of a client listener for receiving the notification ServiceCatalogCreateEvent
     */
    post: operations["listenToServiceCatalogCreateEvent"];
  };
  "/listener/serviceCatalogChangeEvent": {
    /**
     * Client listener for entity ServiceCatalogChangeEvent
     * @description Example of a client listener for receiving the notification ServiceCatalogChangeEvent
     */
    post: operations["listenToServiceCatalogChangeEvent"];
  };
  "/listener/serviceCatalogBatchEvent": {
    /**
     * Client listener for entity ServiceCatalogBatchEvent
     * @description Example of a client listener for receiving the notification ServiceCatalogBatchEvent
     */
    post: operations["listenToServiceCatalogBatchEvent"];
  };
  "/listener/serviceCatalogDeleteEvent": {
    /**
     * Client listener for entity ServiceCatalogDeleteEvent
     * @description Example of a client listener for receiving the notification ServiceCatalogDeleteEvent
     */
    post: operations["listenToServiceCatalogDeleteEvent"];
  };
  "/listener/serviceCategoryCreateEvent": {
    /**
     * Client listener for entity ServiceCategoryCreateEvent
     * @description Example of a client listener for receiving the notification ServiceCategoryCreateEvent
     */
    post: operations["listenToServiceCategoryCreateEvent"];
  };
  "/listener/serviceCategoryChangeEvent": {
    /**
     * Client listener for entity ServiceCategoryChangeEvent
     * @description Example of a client listener for receiving the notification ServiceCategoryChangeEvent
     */
    post: operations["listenToServiceCategoryChangeEvent"];
  };
  "/listener/serviceCategoryDeleteEvent": {
    /**
     * Client listener for entity ServiceCategoryDeleteEvent
     * @description Example of a client listener for receiving the notification ServiceCategoryDeleteEvent
     */
    post: operations["listenToServiceCategoryDeleteEvent"];
  };
  "/listener/serviceCandidateCreateEvent": {
    /**
     * Client listener for entity ServiceCandidateCreateEvent
     * @description Example of a client listener for receiving the notification ServiceCandidateCreateEvent
     */
    post: operations["listenToServiceCandidateCreateEvent"];
  };
  "/listener/serviceCandidateChangeEvent": {
    /**
     * Client listener for entity ServiceCandidateChangeEvent
     * @description Example of a client listener for receiving the notification ServiceCandidateChangeEvent
     */
    post: operations["listenToServiceCandidateChangeEvent"];
  };
  "/listener/serviceCandidateDeleteEvent": {
    /**
     * Client listener for entity ServiceCandidateDeleteEvent
     * @description Example of a client listener for receiving the notification ServiceCandidateDeleteEvent
     */
    post: operations["listenToServiceCandidateDeleteEvent"];
  };
  "/listener/serviceSpecificationCreateEvent": {
    /**
     * Client listener for entity ServiceSpecificationCreateEvent
     * @description Example of a client listener for receiving the notification ServiceSpecificationCreateEvent
     */
    post: operations["listenToServiceSpecificationCreateEvent"];
  };
  "/listener/serviceSpecificationChangeEvent": {
    /**
     * Client listener for entity ServiceSpecificationChangeEvent
     * @description Example of a client listener for receiving the notification ServiceSpecificationChangeEvent
     */
    post: operations["listenToServiceSpecificationChangeEvent"];
  };
  "/listener/serviceSpecificationDeleteEvent": {
    /**
     * Client listener for entity ServiceSpecificationDeleteEvent
     * @description Example of a client listener for receiving the notification ServiceSpecificationDeleteEvent
     */
    post: operations["listenToServiceSpecificationDeleteEvent"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Base schema for adressable entities */
    Addressable: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
    };
    Any: Record<string, never>;
    /** @description reference to an AssociationSpecification object */
    AssociationSpecificationRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description Complements the description of an element (for instance a product) through video, pictures... */
    Attachment: {
      /**
       * @description Unique identifier for this particular attachment
       * @example 4aafacbd-11ff-4dc8-b445-305f2215715f
       */
      id?: string;
      /**
       * Format: uri
       * @description URI for this Attachment
       * @example http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f
       */
      href?: string;
      /**
       * @description Attachment type such as video, picture
       * @example video
       */
      attachmentType?: string;
      /**
       * Format: base64
       * @description The actual contents of the attachment object, if embedded, encoded as base64
       */
      content?: string;
      /**
       * @description A narrative text describing the content of the attachment
       * @example Photograph of the Product
       */
      description?: string;
      /** @description Attachment mime type such as extension file for video, picture and document */
      mimeType?: string;
      /** @description The name of the attachment */
      name?: string;
      /**
       * Format: uri
       * @description Uniform Resource Locator, is a web page address (a subset of URI)
       * @example http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f
       */
      url?: string;
      size?: components["schemas"]["Quantity"];
      validFor?: components["schemas"]["TimePeriod"];
    };
    /** @description Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures */
    AttachmentRef: {
      /** @description Unique-Identifier for this attachment */
      id: string;
      /**
       * Format: uri
       * @description URL serving as reference for the attachment resource
       */
      href?: string;
      /** @description A narrative text describing the content of the attachment */
      description?: string;
      /** @description Name of the related entity. */
      name?: string;
      /**
       * Format: uri
       * @description Link to the attachment media/content
       */
      url?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture. */
    AttachmentRefOrValue: {
      /**
       * @description Unique identifier for this particular attachment
       * @example 4aafacbd-11ff-4dc8-b445-305f2215715f
       */
      id?: string;
      /**
       * Format: uri
       * @description URI for this Attachment
       * @example http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f
       */
      href?: string;
      /**
       * @description Attachment type such as video, picture
       * @example video
       */
      attachmentType?: string;
      /**
       * Format: base64
       * @description The actual contents of the attachment object, if embedded, encoded as base64
       */
      content?: string;
      /**
       * @description A narrative text describing the content of the attachment
       * @example Photograph of the Product
       */
      description?: string;
      /** @description Attachment mime type such as extension file for video, picture and document */
      mimeType?: string;
      /** @description The name of the attachment */
      name?: string;
      /**
       * Format: uri
       * @description Uniform Resource Locator, is a web page address (a subset of URI)
       * @example http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f
       */
      url?: string;
      size?: components["schemas"]["Quantity"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description This class defines a characteristic specification. */
    CharacteristicSpecification: {
      /** @description Unique ID for the characteristic */
      id?: string;
      /** @description If true, the Boolean indicates that the target Characteristic is configurable */
      configurable?: boolean;
      /** @description A narrative that explains the CharacteristicSpecification. */
      description?: string;
      /** @description An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource. */
      extensible?: boolean;
      /** @description An indicator that specifies if a value is unique for the specification. Possible values are; "unique while value is in effect" and "unique whether value is in effect or not" */
      isUnique?: boolean;
      /** @description The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality. */
      maxCardinality?: number;
      /** @description The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality. */
      minCardinality?: number;
      /** @description A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications. */
      name?: string;
      /** @description A rule or principle represented in regular expression used to derive the value of a characteristic value. */
      regex?: string;
      /** @description A kind of value that the characteristic can take on, such as numeric, text and so forth */
      valueType?: string;
      /** @description An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics. */
      charSpecRelationship?: components["schemas"]["CharacteristicSpecificationRelationship"][];
      /** @description A CharacteristicValueSpecification object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a CharacteristicSpecification object. The values of the attributes in the CharacteristicValueSpecification object describe the values of the attributes that a corresponding Characteristic object can take on. */
      characteristicValueSpecification?: components["schemas"]["CharacteristicValueSpecification"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description This (optional) field provides a link to the schema describing the value type. */
      "@valueSchemaLocation"?: string;
    };
    /** @description This class defines a characteristic specification. */
    CharacteristicSpecificationBase: {
      /** @description Unique ID for the characteristic */
      id?: string;
      /** @description If true, the Boolean indicates that the target Characteristic is configurable */
      configurable?: boolean;
      /** @description A narrative that explains the CharacteristicSpecification. */
      description?: string;
      /** @description An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource. */
      extensible?: boolean;
      /** @description An indicator that specifies if a value is unique for the specification. Possible values are; "unique while value is in effect" and "unique whether value is in effect or not" */
      isUnique?: boolean;
      /** @description The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality. */
      maxCardinality?: number;
      /** @description The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality. */
      minCardinality?: number;
      /** @description A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications. */
      name?: string;
      /** @description A rule or principle represented in regular expression used to derive the value of a characteristic value. */
      regex?: string;
      /** @description A kind of value that the characteristic can take on, such as numeric, text and so forth */
      valueType?: string;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description This (optional) field provides a link to the schema describing the value type. */
      "@valueSchemaLocation"?: string;
    };
    /** @description An aggregation, migration, substitution, dependency or exclusivity relationship between/among Characteristic specifications. The specification characteristic is embedded within the specification whose ID and href are in this entity, and identified by its ID. */
    CharacteristicSpecificationRelationship: {
      /** @description Unique identifier of the characteristic within the specification */
      characteristicSpecificationId?: string;
      /** @description Name of the target characteristic within the specification */
      name?: string;
      /**
       * Format: uri
       * @description Hyperlink reference to the parent specification containing the target characteristic
       */
      parentSpecificationHref?: string;
      /** @description Unique identifier of the parent specification containing the target characteristic */
      parentSpecificationId?: string;
      /** @description Type of relationship such as aggregation, migration, substitution, dependency, exclusivity */
      relationshipType?: string;
      validFor?: components["schemas"]["TimePeriod"];
    };
    /** @description specification of a value (number or text or an object) that can be assigned to a Characteristic. */
    CharacteristicValueSpecification: {
      /** @description If true, the Boolean Indicates if the value is the default value for a characteristic */
      isDefault?: boolean;
      /** @description An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are "open", "closed", "closedBottom" and "closedTop". */
      rangeInterval?: string;
      /** @description A regular expression constraint for given value */
      regex?: string;
      /** @description A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot. */
      unitOfMeasure?: string;
      /** @description The low range value that a characteristic can take on */
      valueFrom?: number;
      /** @description The upper range value that a characteristic can take on */
      valueTo?: number;
      /** @description A kind of value that the characteristic value can take on, such as numeric, text and so forth */
      valueType?: string;
      validFor?: components["schemas"]["TimePeriod"];
      value?: components["schemas"]["Any"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /** @description Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec. */
    ConstraintRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description constraint version */
      version?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description Entity reference schema to be use for all entityRef class. */
    EntityRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /**
     * @description EntitySpecification is a class that offers characteristics to describe a type of entity. Entities are generic constructs that may be used to describe bespoke business entities that are not effectively covered by the existing SID model.
     * Functionally, the entity specification acts as a template by which entities may be instantiated and described. By sharing the same specification, these entities would therefore share the same set of characteristics.
     * Note: The ‘configurable’ attribute on the specCharacteristics determines if an entity instantiated from the entity specification can override the value of the attribute. When set to false, the entity instance may not define a value that differs from the value in the specification.
     */
    EntitySpecification: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Description of the specification */
      description?: string;
      /** @description isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true). */
      isBundle?: boolean;
      /**
       * Format: date-time
       * @description Date and time of the last update of the specification
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status of this catalog item */
      lifecycleStatus?: string;
      /** @description Name given to the specification */
      name?: string;
      /** @description specification version */
      version?: string;
      /** @description Attachments that may be of relevance to this specification, such as picture, document, media */
      attachment?: components["schemas"]["AttachmentRefOrValue"][];
      /** @description This is a list of constraint references applied to this specification */
      constraint?: components["schemas"]["ConstraintRef"][];
      /** @description Relationship to another specification */
      entitySpecRelationship?: components["schemas"]["EntitySpecificationRelationship"][];
      /** @description Parties who manage or otherwise have an interest in this specification */
      relatedParty?: components["schemas"]["RelatedParty"][];
      /** @description List of characteristics that the entity can take */
      specCharacteristic?: components["schemas"]["CharacteristicSpecification"][];
      targetEntitySchema?: components["schemas"]["TargetEntitySchema"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /** @description A migration, substitution, dependency or exclusivity relationship between/among entity specifications. */
    EntitySpecificationRelationship: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Type of relationship such as migration, substitution, dependency, exclusivity */
      relationshipType: string;
      /** @description The association role for this entity specification */
      role?: string;
      associationSpec?: components["schemas"]["AssociationSpecificationRef"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description Represents a task used to export resources to a file */
    ExportJob: {
      /** @description Identifier of the export job */
      id?: string;
      /**
       * Format: uri
       * @description Reference of the export job
       */
      href?: string;
      /**
       * Format: date-time
       * @description Data at which the job was completed
       */
      completionDate?: string;
      /** @description The format of the exported data */
      contentType?: string;
      /**
       * Format: date-time
       * @description Date at which the job was created
       */
      creationDate?: string;
      /** @description Reason for failure */
      errorLog?: string;
      /** @description URL of the root resource acting as the source for streaming content to the file specified by the export job */
      path?: string;
      /** @description Used to scope the exported data */
      query?: string;
      /**
       * Format: uri
       * @description URL of the file containing the data to be exported
       */
      url?: string;
      status?: components["schemas"]["JobStateType"];
    };
    /**
     * @description Represents a task used to export resources to a file
     * Skipped properties: id,href
     */
    ExportJob_Create: {
      /**
       * Format: date-time
       * @description Data at which the job was completed
       */
      completionDate?: string;
      /** @description The format of the exported data */
      contentType?: string;
      /**
       * Format: date-time
       * @description Date at which the job was created
       */
      creationDate?: string;
      /** @description Reason for failure */
      errorLog?: string;
      /** @description URL of the root resource acting as the source for streaming content to the file specified by the export job */
      path?: string;
      /** @description Used to scope the exported data */
      query?: string;
      /**
       * Format: uri
       * @description URL of the file containing the data to be exported
       */
      url: string;
      status?: components["schemas"]["JobStateType"];
    };
    /** @description Base Extensible schema for use in TMForum Open-APIs */
    Extensible: {
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /** @description Specification for resource, service or product features */
    FeatureSpecification: {
      /** @description Identifier of the feature specification. Must be locally unique within the containing specification, thus allowing direct access to the feature spec. */
      id?: string;
      /** @description A flag indicating if this is a feature group (true) or not (false) */
      isBundle?: boolean;
      /** @description A flag indicating if the feature is enabled (true) or not (false) */
      isEnabled?: boolean;
      /** @description Unique name given to the feature specification */
      name?: string;
      /** @description Version of the feature specification */
      version?: string;
      /** @description This is a list of feature constraints */
      constraint?: components["schemas"]["ConstraintRef"][];
      /** @description This is a list of characteristics for a particular feature */
      featureSpecCharacteristic?: components["schemas"]["FeatureSpecificationCharacteristic"][];
      /** @description A dependency, exclusivity or aggratation relationship between/among feature specifications. */
      featureSpecRelationship?: components["schemas"]["FeatureSpecificationRelationship"][];
      validFor?: components["schemas"]["TimePeriod"];
    };
    /** @description Configuration feature characteristic specification. */
    FeatureSpecificationCharacteristic: {
      /** @description Unique ID for the characteristic */
      id?: string;
      /** @description If true, the Boolean indicates that the target Characteristic is configurable */
      configurable?: boolean;
      /** @description A narrative that explains the CharacteristicSpecification. */
      description?: string;
      /** @description An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for a resource. */
      extensible?: boolean;
      /** @description An indicator that specifies if a value is unique for the specification. Possible values are; "unique while value is in effect" and "unique whether value is in effect or not" */
      isUnique?: boolean;
      /** @description The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality. */
      maxCardinality?: number;
      /** @description The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality. */
      minCardinality?: number;
      /** @description A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications. */
      name: string;
      /** @description A rule or principle represented in regular expression used to derive the value of a characteristic value. */
      regex?: string;
      /** @description A kind of value that the characteristic can take on, such as numeric, text and so forth */
      valueType?: string;
      /** @description An aggregation, migration, substitution, dependency or exclusivity relationship between/among feature characteristics. */
      featureSpecCharRelationship?: components["schemas"]["FeatureSpecificationCharacteristicRelationship"][];
      /** @description Used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a FeatureCharacteristic object. */
      featureSpecCharacteristicValue?: components["schemas"]["CharacteristicValueSpecification"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description This (optional) field provides a link to the schema describing the value type. */
      "@valueSchemaLocation"?: string;
    };
    /** @description An aggregation, migration, substitution, dependency or exclusivity relationship between/among FeatureSpecificationCharacteristics. */
    FeatureSpecificationCharacteristicRelationship: {
      /** @description Unique identifier of the characteristic within the the target feature specification */
      characteristicId?: string;
      /** @description Unique identifier of the target feature specification within the resource specification. */
      featureId?: string;
      /** @description Name of the target characteristic */
      name?: string;
      /** @description Type of relationship such as aggregation, migration, substitution, dependency, exclusivity */
      relationshipType?: string;
      /**
       * Format: uri
       * @description Hyperlink reference to the resource specification containing the target feature and feature characteristic
       */
      resourceSpecificationHref?: string;
      /** @description Unique identifier of the resource specification containing the target feature and feature characteristic */
      resourceSpecificationId?: string;
      validFor?: components["schemas"]["TimePeriod"];
    };
    /** @description Relationship between feature specifications */
    FeatureSpecificationRelationship: {
      /** @description Unique identifier of the target feature specification. */
      featureId?: string;
      /** @description This is the name of the target feature specification. */
      name: string;
      /**
       * Format: uri
       * @description Hyperlink reference to the parent specification containing the target feature
       */
      parentSpecificationHref?: string;
      /** @description Unique identifier of the parent specification containing the target feature */
      parentSpecificationId?: string;
      /** @description This is the type of the feature specification relationship. */
      relationshipType: string;
      validFor?: components["schemas"]["TimePeriod"];
    };
    /** @description Represents a task used to import resources from a file */
    ImportJob: {
      /** @description Identifier of the import job */
      id?: string;
      /**
       * Format: uri
       * @description Reference of the import job
       */
      href?: string;
      /**
       * Format: date-time
       * @description Date at which the job was completed
       */
      completionDate?: string;
      /** @description Indicates the format of the imported data */
      contentType?: string;
      /**
       * Format: date-time
       * @description Date at which the job was created
       */
      creationDate?: string;
      /** @description Reason for failure if status is failed */
      errorLog?: string;
      /** @description URL of the root resource where the content of the file specified by the import job must be applied */
      path?: string;
      /**
       * Format: uri
       * @description URL of the file containing the data to be imported
       */
      url?: string;
      status?: components["schemas"]["JobStateType"];
    };
    /**
     * @description Represents a task used to import resources from a file
     * Skipped properties: id,href
     */
    ImportJob_Create: {
      /**
       * Format: date-time
       * @description Date at which the job was completed
       */
      completionDate?: string;
      /** @description Indicates the format of the imported data */
      contentType?: string;
      /**
       * Format: date-time
       * @description Date at which the job was created
       */
      creationDate?: string;
      /** @description Reason for failure if status is failed */
      errorLog?: string;
      /** @description URL of the root resource where the content of the file specified by the import job must be applied */
      path?: string;
      /**
       * Format: uri
       * @description URL of the file containing the data to be imported
       */
      url: string;
      status?: components["schemas"]["JobStateType"];
    };
    /**
     * @description Valid values for the state of a batch job (e.g. catalog import)
     * @enum {string}
     */
    JobStateType: "Not Started" | "Running" | "Succeeded" | "Failed";
    /** @description An amount in a given unit */
    Quantity: {
      /**
       * Format: float
       * @description Numeric value in a given unit
       * @default 1
       */
      amount?: number;
      /** @description Unit */
      units?: string;
    };
    /** @description Related Entity reference. A related party defines party or party role linked to a specific entity. */
    RelatedParty: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Role played by the related party */
      role?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType": string;
    };
    /**
     * @description Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.
     * A ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.
     */
    ResourceSpecificationRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Resource Specification version */
      version?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /**
     * @description ServiceCandidate is an entity that makes a service specification available to a catalog. A
     * ServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.
     */
    ServiceCandidate: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Description of this REST resource */
      description?: string;
      /**
       * Format: date-time
       * @description Date and time of the last update of this REST resource
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status of the service candidate. */
      lifecycleStatus?: string;
      /** @description Name given to this REST resource */
      name?: string;
      /** @description the version of service candidate */
      version?: string;
      /** @description List of categories for this candidate */
      category?: components["schemas"]["ServiceCategoryRef"][];
      serviceSpecification?: components["schemas"]["ServiceSpecificationRef"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description ServiceCandidate is an entity that makes a service specification available to a catalog. A
     * ServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.
     * Skipped properties: id,href
     */
    ServiceCandidate_Create: {
      /** @description Description of this REST resource */
      description?: string;
      /**
       * Format: date-time
       * @description Date and time of the last update of this REST resource
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status of the service candidate. */
      lifecycleStatus?: string;
      /** @description Name given to this REST resource */
      name: string;
      /** @description the version of service candidate */
      version?: string;
      /** @description List of categories for this candidate */
      category?: components["schemas"]["ServiceCategoryRef"][];
      serviceSpecification: components["schemas"]["ServiceSpecificationRef"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description ServiceCandidate is an entity that makes a service specification available to a catalog. A
     * ServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.
     * Skipped properties: id,href,lastUpdate
     */
    ServiceCandidate_Update: {
      /** @description Description of this REST resource */
      description?: string;
      /** @description Used to indicate the current lifecycle status of the service candidate. */
      lifecycleStatus?: string;
      /** @description Name given to this REST resource */
      name?: string;
      /** @description the version of service candidate */
      version?: string;
      /** @description List of categories for this candidate */
      category?: components["schemas"]["ServiceCategoryRef"][];
      serviceSpecification?: components["schemas"]["ServiceSpecificationRef"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /** @description ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog. */
    ServiceCandidateRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Version of the service candidate */
      version?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /**
     * @description The root entity for service catalog management.
     * A service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).
     * A service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.
     * A ServiceCandidate and its associated ServiceSpecification may be "published" - made visible -in any number of ServiceCatalogs, or in none.
     */
    ServiceCatalog: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Description of this catalog */
      description?: string;
      /**
       * Format: date-time
       * @description Date and time of the last update
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status */
      lifecycleStatus?: string;
      /** @description Name of the service catalog */
      name?: string;
      /** @description ServiceCatalog version */
      version?: string;
      /** @description List of service categories associated with this catalog */
      category?: components["schemas"]["ServiceCategoryRef"][];
      /** @description List of parties or party roles related to this category */
      relatedParty?: components["schemas"]["RelatedParty"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description The root entity for service catalog management.
     * A service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).
     * A service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.
     * A ServiceCandidate and its associated ServiceSpecification may be "published" - made visible -in any number of ServiceCatalogs, or in none.
     * Skipped properties: id,href
     */
    ServiceCatalog_Create: {
      /** @description Description of this catalog */
      description?: string;
      /**
       * Format: date-time
       * @description Date and time of the last update
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status */
      lifecycleStatus?: string;
      /** @description Name of the service catalog */
      name: string;
      /** @description ServiceCatalog version */
      version?: string;
      /** @description List of service categories associated with this catalog */
      category?: components["schemas"]["ServiceCategoryRef"][];
      /** @description List of parties or party roles related to this category */
      relatedParty?: components["schemas"]["RelatedParty"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description The root entity for service catalog management.
     * A service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers).
     * A service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.
     * A ServiceCandidate and its associated ServiceSpecification may be "published" - made visible -in any number of ServiceCatalogs, or in none.
     * Skipped properties: id,href,lastUpdate
     */
    ServiceCatalog_Update: {
      /** @description Description of this catalog */
      description?: string;
      /** @description Used to indicate the current lifecycle status */
      lifecycleStatus?: string;
      /** @description Name of the service catalog */
      name?: string;
      /** @description ServiceCatalog version */
      version?: string;
      /** @description List of service categories associated with this catalog */
      category?: components["schemas"]["ServiceCategoryRef"][];
      /** @description List of parties or party roles related to this category */
      relatedParty?: components["schemas"]["RelatedParty"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /** @description The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories. */
    ServiceCategory: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Description of the category */
      description?: string;
      /** @description If true, this Boolean indicates that the category is a root of categories */
      isRoot?: boolean;
      /**
       * Format: date-time
       * @description Date and time of the last update
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status */
      lifecycleStatus?: string;
      /** @description Name of the category */
      name?: string;
      /** @description Unique identifier of the parent category */
      parentId?: string;
      /** @description ServiceCategory version */
      version?: string;
      /** @description List of child categories in the tree for in this category */
      category?: components["schemas"]["ServiceCategoryRef"][];
      /** @description List of service candidates associated with this category */
      serviceCandidate?: components["schemas"]["ServiceCandidateRef"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.
     * Skipped properties: id,href
     */
    ServiceCategory_Create: {
      /** @description Description of the category */
      description?: string;
      /** @description If true, this Boolean indicates that the category is a root of categories */
      isRoot?: boolean;
      /**
       * Format: date-time
       * @description Date and time of the last update
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status */
      lifecycleStatus?: string;
      /** @description Name of the category */
      name: string;
      /** @description Unique identifier of the parent category */
      parentId?: string;
      /** @description ServiceCategory version */
      version?: string;
      /** @description List of child categories in the tree for in this category */
      category?: components["schemas"]["ServiceCategoryRef"][];
      /** @description List of service candidates associated with this category */
      serviceCandidate?: components["schemas"]["ServiceCandidateRef"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.
     * Skipped properties: id,href,lastUpdate
     */
    ServiceCategory_Update: {
      /** @description Description of the category */
      description?: string;
      /** @description If true, this Boolean indicates that the category is a root of categories */
      isRoot?: boolean;
      /** @description Used to indicate the current lifecycle status */
      lifecycleStatus?: string;
      /** @description Name of the category */
      name?: string;
      /** @description Unique identifier of the parent category */
      parentId?: string;
      /** @description ServiceCategory version */
      version?: string;
      /** @description List of child categories in the tree for in this category */
      category?: components["schemas"]["ServiceCategoryRef"][];
      /** @description List of service candidates associated with this category */
      serviceCandidate?: components["schemas"]["ServiceCandidateRef"][];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /** @description The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories. */
    ServiceCategoryRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Category version */
      version?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /**
     * @description A Service Level Specification represents a pre-defined or negotiated set of Service Level
     * Objectives. In addition, certain consequences are associated with not meeting the Service Level
     * Objectives. Service Level Agreements are expressed in terms of Service Level Specifications.
     */
    ServiceLevelSpecificationRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description A dependency, substitution or exclusivity relationship between/among service specifications. */
    ServiceSpecRelationship: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Type of relationship such as dependency, substitution or exclusivity */
      relationshipType: string;
      /** @description The association role for this service specification */
      role?: string;
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /**
     * @description ServiceSpecification is a class that offers characteristics to describe a type of service.
     * Functionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics.
     */
    ServiceSpecification: {
      /** @description unique identifier */
      id?: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Description of the specification */
      description?: string;
      /** @description isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true). */
      isBundle?: boolean;
      /**
       * Format: date-time
       * @description Date and time of the last update of the specification
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status of this catalog item */
      lifecycleStatus?: string;
      /** @description Name given to the specification */
      name?: string;
      /** @description specification version */
      version?: string;
      /** @description Attachments that may be of relevance to this specification, such as picture, document, media */
      attachment?: components["schemas"]["AttachmentRefOrValue"][];
      /** @description This is a list of constraint references applied to this specification */
      constraint?: components["schemas"]["ConstraintRef"][];
      /** @description Relationship to another specification */
      entitySpecRelationship?: components["schemas"]["EntitySpecificationRelationship"][];
      /** @description A list of Features for this specification. */
      featureSpecification?: components["schemas"]["FeatureSpecification"][];
      /** @description Parties who manage or otherwise have an interest in this specification */
      relatedParty?: components["schemas"]["RelatedParty"][];
      /** @description A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS). */
      resourceSpecification?: components["schemas"]["ResourceSpecificationRef"][];
      /** @description A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum */
      serviceLevelSpecification?: components["schemas"]["ServiceLevelSpecificationRef"][];
      /** @description A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship */
      serviceSpecRelationship?: components["schemas"]["ServiceSpecRelationship"][];
      /** @description List of characteristics that the entity can take */
      specCharacteristic?: components["schemas"]["CharacteristicSpecification"][];
      targetEntitySchema?: components["schemas"]["TargetEntitySchema"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description ServiceSpecification is a class that offers characteristics to describe a type of service.
     * Functionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics.
     * Skipped properties: id,href
     */
    ServiceSpecification_Create: {
      /** @description Description of the specification */
      description?: string;
      /** @description isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true). */
      isBundle?: boolean;
      /**
       * Format: date-time
       * @description Date and time of the last update of the specification
       */
      lastUpdate?: string;
      /** @description Used to indicate the current lifecycle status of this catalog item */
      lifecycleStatus?: string;
      /** @description Name given to the specification */
      name: string;
      /** @description specification version */
      version?: string;
      /** @description Attachments that may be of relevance to this specification, such as picture, document, media */
      attachment?: components["schemas"]["AttachmentRefOrValue"][];
      /** @description This is a list of constraint references applied to this specification */
      constraint?: components["schemas"]["ConstraintRef"][];
      /** @description Relationship to another specification */
      entitySpecRelationship?: components["schemas"]["EntitySpecificationRelationship"][];
      /** @description A list of Features for this specification. */
      featureSpecification?: components["schemas"]["FeatureSpecification"][];
      /** @description Parties who manage or otherwise have an interest in this specification */
      relatedParty?: components["schemas"]["RelatedParty"][];
      /** @description A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS). */
      resourceSpecification?: components["schemas"]["ResourceSpecificationRef"][];
      /** @description A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum */
      serviceLevelSpecification?: components["schemas"]["ServiceLevelSpecificationRef"][];
      /** @description A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship */
      serviceSpecRelationship?: components["schemas"]["ServiceSpecRelationship"][];
      /** @description List of characteristics that the entity can take */
      specCharacteristic?: components["schemas"]["CharacteristicSpecification"][];
      targetEntitySchema?: components["schemas"]["TargetEntitySchema"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /**
     * @description ServiceSpecification is a class that offers characteristics to describe a type of service.
     * Functionally, it acts as a template by which Services may be instantiated. By sharing the same specification, these services would therefore share the same set of characteristics.
     * Skipped properties: id,href,lastUpdate
     */
    ServiceSpecification_Update: {
      /** @description Description of the specification */
      description?: string;
      /** @description isBundle determines whether specification represents a single specification (false), or a bundle of specifications (true). */
      isBundle?: boolean;
      /** @description Used to indicate the current lifecycle status of this catalog item */
      lifecycleStatus?: string;
      /** @description Name given to the specification */
      name?: string;
      /** @description specification version */
      version?: string;
      /** @description Attachments that may be of relevance to this specification, such as picture, document, media */
      attachment?: components["schemas"]["AttachmentRefOrValue"][];
      /** @description This is a list of constraint references applied to this specification */
      constraint?: components["schemas"]["ConstraintRef"][];
      /** @description Relationship to another specification */
      entitySpecRelationship?: components["schemas"]["EntitySpecificationRelationship"][];
      /** @description A list of Features for this specification. */
      featureSpecification?: components["schemas"]["FeatureSpecification"][];
      /** @description Parties who manage or otherwise have an interest in this specification */
      relatedParty?: components["schemas"]["RelatedParty"][];
      /** @description A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS). */
      resourceSpecification?: components["schemas"]["ResourceSpecificationRef"][];
      /** @description A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum */
      serviceLevelSpecification?: components["schemas"]["ServiceLevelSpecificationRef"][];
      /** @description A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship */
      serviceSpecRelationship?: components["schemas"]["ServiceSpecRelationship"][];
      /** @description List of characteristics that the entity can take */
      specCharacteristic?: components["schemas"]["CharacteristicSpecification"][];
      targetEntitySchema?: components["schemas"]["TargetEntitySchema"];
      validFor?: components["schemas"]["TimePeriod"];
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
    };
    /** @description Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification. */
    ServiceSpecificationRef: {
      /** @description unique identifier */
      id: string;
      /**
       * Format: uri
       * @description Hyperlink reference
       */
      href?: string;
      /** @description Name of the related entity. */
      name?: string;
      /** @description Service specification version */
      version?: string;
      /** @description When sub-classing, this defines the super-class */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class Extensible name */
      "@type"?: string;
      /** @description The actual type of the target instance when needed for disambiguation. */
      "@referredType"?: string;
    };
    /** @description The reference object to the schema and type of target entity which is described by a specification */
    TargetEntitySchema: {
      /** @description This field provides a link to the schema describing the target entity */
      "@schemaLocation": string;
      /** @description Class type of the target entity */
      "@type": string;
    };
    /** @description A period of time, either as a deadline (endDateTime only) a startDateTime only, or both */
    TimePeriod: {
      /**
       * Format: date-time
       * @description End of the time period, using IETC-RFC-3339 format
       * @example 1985-04-12T23:20:50.52Z
       */
      endDateTime?: string;
      /**
       * Format: date-time
       * @description Start of the time period, using IETC-RFC-3339 format
       * @example 1985-04-12T23:20:50.52Z
       */
      startDateTime?: string;
    };
    /** @description Sets the communication endpoint address the service instance must use to deliver notification information */
    EventSubscription: {
      /** @description Id of the listener */
      id: string;
      /** @description The callback being registered. */
      callback: string;
      /** @description additional data to be passed */
      query?: string;
    };
    /** @description Sets the communication endpoint address the service instance must use to deliver notification information */
    EventSubscriptionInput: {
      /** @description The callback being registered. */
      callback: string;
      /** @description additional data to be passed */
      query?: string;
    };
    /** @description The notification data structure */
    ServiceCatalogCreateEvent: {
      event?: components["schemas"]["ServiceCatalogCreateEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCatalogCreateEventPayload: {
      serviceCatalog?: components["schemas"]["ServiceCatalog"];
    };
    /** @description The notification data structure */
    ServiceCatalogChangeEvent: {
      event?: components["schemas"]["ServiceCatalogChangeEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCatalogChangeEventPayload: {
      serviceCatalog?: components["schemas"]["ServiceCatalog"];
    };
    /** @description The notification data structure */
    ServiceCatalogBatchEvent: {
      event?: components["schemas"]["ServiceCatalogBatchEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCatalogBatchEventPayload: {
      serviceCatalog?: components["schemas"]["ServiceCatalog"];
    };
    /** @description The notification data structure */
    ServiceCatalogDeleteEvent: {
      event?: components["schemas"]["ServiceCatalogDeleteEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCatalogDeleteEventPayload: {
      serviceCatalog?: components["schemas"]["ServiceCatalog"];
    };
    /** @description The notification data structure */
    ServiceCategoryCreateEvent: {
      event?: components["schemas"]["ServiceCategoryCreateEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCategoryCreateEventPayload: {
      serviceCategory?: components["schemas"]["ServiceCategory"];
    };
    /** @description The notification data structure */
    ServiceCategoryChangeEvent: {
      event?: components["schemas"]["ServiceCategoryChangeEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCategoryChangeEventPayload: {
      serviceCategory?: components["schemas"]["ServiceCategory"];
    };
    /** @description The notification data structure */
    ServiceCategoryDeleteEvent: {
      event?: components["schemas"]["ServiceCategoryDeleteEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCategoryDeleteEventPayload: {
      serviceCategory?: components["schemas"]["ServiceCategory"];
    };
    /** @description The notification data structure */
    ServiceCandidateCreateEvent: {
      event?: components["schemas"]["ServiceCandidateCreateEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCandidateCreateEventPayload: {
      serviceCandidate?: components["schemas"]["ServiceCandidate"];
    };
    /** @description The notification data structure */
    ServiceCandidateChangeEvent: {
      event?: components["schemas"]["ServiceCandidateChangeEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCandidateChangeEventPayload: {
      serviceCandidate?: components["schemas"]["ServiceCandidate"];
    };
    /** @description The notification data structure */
    ServiceCandidateDeleteEvent: {
      event?: components["schemas"]["ServiceCandidateDeleteEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceCandidateDeleteEventPayload: {
      serviceCandidate?: components["schemas"]["ServiceCandidate"];
    };
    /** @description The notification data structure */
    ServiceSpecificationCreateEvent: {
      event?: components["schemas"]["ServiceSpecificationCreateEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceSpecificationCreateEventPayload: {
      serviceSpecification?: components["schemas"]["ServiceSpecification"];
    };
    /** @description The notification data structure */
    ServiceSpecificationChangeEvent: {
      event?: components["schemas"]["ServiceSpecificationChangeEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceSpecificationChangeEventPayload: {
      serviceSpecification?: components["schemas"]["ServiceSpecification"];
    };
    /** @description The notification data structure */
    ServiceSpecificationDeleteEvent: {
      event?: components["schemas"]["ServiceSpecificationDeleteEventPayload"];
      /** @description The identifier of the notification. */
      eventId?: string;
      /**
       * Format: date-time
       * @description Time of the event occurrence.
       */
      eventTime?: string;
      /** @description The type of the notification. */
      eventType?: string;
      /** @description The correlation id for this event. */
      correlationId?: string;
      /** @description The domain of the event. */
      domain?: string;
      /** @description The title of the event. */
      title?: string;
      /** @description An explnatory of the event. */
      description?: string;
      /** @description A priority. */
      priority?: string;
      /**
       * Format: date-time
       * @description The time the event occured.
       */
      timeOcurred?: string;
    };
    /** @description The event data structure */
    ServiceSpecificationDeleteEventPayload: {
      serviceSpecification?: components["schemas"]["ServiceSpecification"];
    };
    /** @description Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx) */
    Error: {
      /** @description Application relevant detail, defined in the API or a common list. */
      code: string;
      /** @description Explanation of the reason for the error which can be shown to a client user. */
      reason: string;
      /** @description More details and corrective actions related to the error which can be shown to a client user. */
      message?: string;
      /** @description HTTP Error code extension */
      status?: string;
      /**
       * Format: uri
       * @description URI of documentation describing the error.
       */
      referenceError?: string;
      /** @description When sub-classing, this defines the super-class. */
      "@baseType"?: string;
      /**
       * Format: uri
       * @description A URI to a JSON-Schema file that defines additional attributes and relationships
       */
      "@schemaLocation"?: string;
      /** @description When sub-classing, this defines the sub-class entity name. */
      "@type"?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List or find ServiceCatalog objects
   * @description This operation list or find ServiceCatalog entities
   */
  listServiceCatalog: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCatalog"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a ServiceCatalog
   * @description This operation creates a ServiceCatalog entity.
   */
  createServiceCatalog: {
    /** @description The ServiceCatalog to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCatalog_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCatalog"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a ServiceCatalog by ID
   * @description This operation retrieves a ServiceCatalog entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveServiceCatalog: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the ServiceCatalog */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCatalog"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a ServiceCatalog
   * @description This operation deletes a ServiceCatalog entity.
   */
  deleteServiceCatalog: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceCatalog */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Updates partially a ServiceCatalog
   * @description This operation updates partially a ServiceCatalog entity.
   */
  patchServiceCatalog: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceCatalog */
        id: string;
      };
    };
    /** @description The ServiceCatalog to be updated */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCatalog_Update"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCatalog"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * List or find ServiceCategory objects
   * @description This operation list or find ServiceCategory entities
   */
  listServiceCategory: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCategory"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a ServiceCategory
   * @description This operation creates a ServiceCategory entity.
   */
  createServiceCategory: {
    /** @description The ServiceCategory to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCategory_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCategory"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a ServiceCategory by ID
   * @description This operation retrieves a ServiceCategory entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveServiceCategory: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the ServiceCategory */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCategory"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a ServiceCategory
   * @description This operation deletes a ServiceCategory entity.
   */
  deleteServiceCategory: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceCategory */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Updates partially a ServiceCategory
   * @description This operation updates partially a ServiceCategory entity.
   */
  patchServiceCategory: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceCategory */
        id: string;
      };
    };
    /** @description The ServiceCategory to be updated */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCategory_Update"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCategory"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * List or find ServiceCandidate objects
   * @description This operation list or find ServiceCandidate entities
   */
  listServiceCandidate: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCandidate"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a ServiceCandidate
   * @description This operation creates a ServiceCandidate entity.
   */
  createServiceCandidate: {
    /** @description The ServiceCandidate to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCandidate_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCandidate"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a ServiceCandidate by ID
   * @description This operation retrieves a ServiceCandidate entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveServiceCandidate: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the ServiceCandidate */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCandidate"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a ServiceCandidate
   * @description This operation deletes a ServiceCandidate entity.
   */
  deleteServiceCandidate: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceCandidate */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Updates partially a ServiceCandidate
   * @description This operation updates partially a ServiceCandidate entity.
   */
  patchServiceCandidate: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceCandidate */
        id: string;
      };
    };
    /** @description The ServiceCandidate to be updated */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCandidate_Update"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceCandidate"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * List or find ServiceSpecification objects
   * @description This operation list or find ServiceSpecification entities
   */
  listServiceSpecification: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceSpecification"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a ServiceSpecification
   * @description This operation creates a ServiceSpecification entity.
   */
  createServiceSpecification: {
    /** @description The ServiceSpecification to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceSpecification_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceSpecification"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a ServiceSpecification by ID
   * @description This operation retrieves a ServiceSpecification entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveServiceSpecification: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the ServiceSpecification */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceSpecification"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a ServiceSpecification
   * @description This operation deletes a ServiceSpecification entity.
   */
  deleteServiceSpecification: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceSpecification */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Updates partially a ServiceSpecification
   * @description This operation updates partially a ServiceSpecification entity.
   */
  patchServiceSpecification: {
    parameters: {
      path: {
        /** @description Identifier of the ServiceSpecification */
        id: string;
      };
    };
    /** @description The ServiceSpecification to be updated */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceSpecification_Update"];
      };
    };
    responses: {
      /** @description Updated */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ServiceSpecification"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * List or find ImportJob objects
   * @description This operation list or find ImportJob entities
   */
  listImportJob: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["ImportJob"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a ImportJob
   * @description This operation creates a ImportJob entity.
   */
  createImportJob: {
    /** @description The ImportJob to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ImportJob_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ImportJob"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a ImportJob by ID
   * @description This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveImportJob: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the ImportJob */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ImportJob"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a ImportJob
   * @description This operation deletes a ImportJob entity.
   */
  deleteImportJob: {
    parameters: {
      path: {
        /** @description Identifier of the ImportJob */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * List or find ExportJob objects
   * @description This operation list or find ExportJob entities
   */
  listExportJob: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to be provided in response */
        fields?: string;
        /** @description Requested index for start of resources to be provided in response */
        offset?: number;
        /** @description Requested number of resources to be provided in response */
        limit?: number;
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          /** @description Total number of items matching criteria */
          "X-Total-Count"?: number;
          /** @description Actual number of items returned in the response body */
          "X-Result-Count"?: number;
        };
        content: {
          "application/json;charset=utf-8": components["schemas"]["ExportJob"][];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a ExportJob
   * @description This operation creates a ExportJob entity.
   */
  createExportJob: {
    /** @description The ExportJob to be created */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ExportJob_Create"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ExportJob"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Retrieves a ExportJob by ID
   * @description This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.
   */
  retrieveExportJob: {
    parameters: {
      query?: {
        /** @description Comma-separated properties to provide in response */
        fields?: string;
      };
      path: {
        /** @description Identifier of the ExportJob */
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["ExportJob"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a ExportJob
   * @description This operation deletes a ExportJob entity.
   */
  deleteExportJob: {
    parameters: {
      path: {
        /** @description Identifier of the ExportJob */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Register a listener
   * @description Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
   */
  registerListener: {
    /** @description Data containing the callback endpoint to deliver the information */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["EventSubscriptionInput"];
      };
    };
    responses: {
      /** @description Subscribed */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Unregister a listener
   * @description Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.
   */
  unregisterListener: {
    parameters: {
      path: {
        /** @description The id of the registered listener */
        id: string;
      };
    };
    responses: {
      /** @description Deleted */
      204: {
        content: {
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCatalogCreateEvent
   * @description Example of a client listener for receiving the notification ServiceCatalogCreateEvent
   */
  listenToServiceCatalogCreateEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCatalogCreateEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCatalogChangeEvent
   * @description Example of a client listener for receiving the notification ServiceCatalogChangeEvent
   */
  listenToServiceCatalogChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCatalogChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCatalogBatchEvent
   * @description Example of a client listener for receiving the notification ServiceCatalogBatchEvent
   */
  listenToServiceCatalogBatchEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCatalogBatchEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCatalogDeleteEvent
   * @description Example of a client listener for receiving the notification ServiceCatalogDeleteEvent
   */
  listenToServiceCatalogDeleteEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCatalogDeleteEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCategoryCreateEvent
   * @description Example of a client listener for receiving the notification ServiceCategoryCreateEvent
   */
  listenToServiceCategoryCreateEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCategoryCreateEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCategoryChangeEvent
   * @description Example of a client listener for receiving the notification ServiceCategoryChangeEvent
   */
  listenToServiceCategoryChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCategoryChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCategoryDeleteEvent
   * @description Example of a client listener for receiving the notification ServiceCategoryDeleteEvent
   */
  listenToServiceCategoryDeleteEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCategoryDeleteEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCandidateCreateEvent
   * @description Example of a client listener for receiving the notification ServiceCandidateCreateEvent
   */
  listenToServiceCandidateCreateEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCandidateCreateEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCandidateChangeEvent
   * @description Example of a client listener for receiving the notification ServiceCandidateChangeEvent
   */
  listenToServiceCandidateChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCandidateChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceCandidateDeleteEvent
   * @description Example of a client listener for receiving the notification ServiceCandidateDeleteEvent
   */
  listenToServiceCandidateDeleteEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceCandidateDeleteEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceSpecificationCreateEvent
   * @description Example of a client listener for receiving the notification ServiceSpecificationCreateEvent
   */
  listenToServiceSpecificationCreateEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceSpecificationCreateEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceSpecificationChangeEvent
   * @description Example of a client listener for receiving the notification ServiceSpecificationChangeEvent
   */
  listenToServiceSpecificationChangeEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceSpecificationChangeEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Client listener for entity ServiceSpecificationDeleteEvent
   * @description Example of a client listener for receiving the notification ServiceSpecificationDeleteEvent
   */
  listenToServiceSpecificationDeleteEvent: {
    /** @description The event data */
    requestBody: {
      content: {
        "application/json;charset=utf-8": components["schemas"]["ServiceSpecificationDeleteEvent"];
      };
    };
    responses: {
      /** @description Notified */
      201: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["EventSubscription"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Method Not allowed */
      405: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json;charset=utf-8": components["schemas"]["Error"];
        };
      };
    };
  };
}
